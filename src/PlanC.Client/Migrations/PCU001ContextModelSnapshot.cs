// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlanC.Client.Data;

namespace PlanC.Client.Migrations
{
    [DbContext(typeof(PCU001Context))]
    partial class PCU001ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(900)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(900)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(900)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(900)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.CategoriesProgrammes", b =>
                {
                    b.Property<string>("CategorieId")
                        .HasColumnName("CategorieID")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("RcdCdttm")
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("CategorieId")
                        .HasName("PK_TCDTY");

                    b.ToTable("CategoriesProgrammes");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.CompetenceContextes", b =>
                {
                    b.Property<int>("IdentityKeyCompetence")
                        .HasColumnType("int");

                    b.Property<int>("ContexteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContexteID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdentityKeyCompetence", "ContexteId")
                        .HasName("PK__Context_Competence");

                    b.HasAlternateKey("ContexteId", "IdentityKeyCompetence");

                    b.ToTable("CompetenceContextes");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.Competences", b =>
                {
                    b.Property<int>("IdentityKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttitudeAttendu")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasDefaultValueSql("('(la description d''une ou plusieurs attitudes est attendue.)')");

                    b.Property<bool?>("CompetenceComplementaire")
                        .HasColumnType("bit");

                    b.Property<string>("CompetenceId")
                        .IsRequired()
                        .HasColumnName("CompetenceID")
                        .HasColumnType("char(4)")
                        .IsFixedLength(true)
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<int>("DisciplineId")
                        .HasColumnName("DisciplineID")
                        .HasColumnType("int");

                    b.Property<string>("Enonce")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("NombreParties")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("IdentityKey")
                        .HasName("PK__tmp_ms_x__796424B81FB8FA6E");

                    b.HasIndex("DisciplineId");

                    b.ToTable("Competences");

                    b.HasComment("Compétence");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.CoursActivite", b =>
                {
                    b.Property<int>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActvtDesc")
                        .HasColumnName("ACTVT_DESC")
                        .HasColumnType("ntext");

                    b.Property<short?>("ActvtLgnth")
                        .HasColumnName("ACTVT_LGNTH")
                        .HasColumnType("smallint")
                        .HasComment("Nombre de semaines consacrées à cette activité");

                    b.Property<short>("ActvtSqnbr")
                        .HasColumnName("ACTVT_SQNBR")
                        .HasColumnType("smallint");

                    b.Property<string>("CoursId")
                        .IsRequired()
                        .HasColumnName("CoursID")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasComment("Code d'identification d'un cours")
                        .HasMaxLength(10);

                    b.Property<DateTime>("PlnVsnCdttm")
                        .HasColumnName("PLN_VSN_CDTTM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnName("SessionID")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("TchrUid")
                        .IsRequired()
                        .HasColumnName("TCHR_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("Identity")
                        .HasName("PK__tmp_ms_x__6E2BA98B3D6EAA7F")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CoursId", "TchrUid", "PlnVsnCdttm", "SessionId", "ActvtSqnbr")
                        .IsUnique()
                        .HasName("PK_TCRSACTVT")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("CoursActivite");

                    b.HasComment("Calendrier des activités");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.CoursCompetenceElements", b =>
                {
                    b.Property<int>("IdentityCritereElementCompetence")
                        .HasColumnType("int");

                    b.Property<int>("IdendityCoursActivity")
                        .HasColumnType("int");

                    b.Property<int>("AcitiviteSqnbr")
                        .HasColumnName("AcitiviteSQNBR")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("IdentityCritereElementCompetence", "IdendityCoursActivity", "AcitiviteSqnbr")
                        .HasName("PK_TACTELEM");

                    b.HasAlternateKey("AcitiviteSqnbr", "IdendityCoursActivity", "IdentityCritereElementCompetence");

                    b.HasIndex("IdendityCoursActivity");

                    b.ToTable("CoursCompetenceElements");

                    b.HasComment("Association activité -- élément de compétence");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.CoursRequis", b =>
                {
                    b.Property<string>("CoursId")
                        .HasColumnName("CoursID")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasComment("Code d'identification d'un cours")
                        .HasMaxLength(10);

                    b.Property<DateTime>("VsnCdttm")
                        .HasColumnName("VSN_CDTTM")
                        .HasColumnType("datetime");

                    b.Property<string>("CoursRequisId")
                        .HasColumnName("CoursRequisID")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("CrsReqTyCd")
                        .HasColumnName("CRS_REQ_TY_CD")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("CoursId", "VsnCdttm", "CoursRequisId")
                        .HasName("PK_TCRSREQ");

                    b.HasAlternateKey("CoursId", "CoursRequisId", "VsnCdttm");

                    b.ToTable("CoursRequis");

                    b.HasComment("Prérequis; corequis");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.CriteresElementCompetence", b =>
                {
                    b.Property<int>("IdentityKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CritereElementCompetenceSqnbr")
                        .HasColumnName("CritereElementCompetenceSQNBR")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionCritere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementCompetenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasDefaultValueSql("('ANO')")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("IdentityKey")
                        .HasName("PK__tmp_ms_x__796424B8AC031FFF");

                    b.HasIndex("ElementCompetenceId");

                    b.ToTable("CriteresElementCompetence");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.Departements", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Politique")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Titre")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Departements");

                    b.HasComment("Département");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.DisponibilitesUtilisateur", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnName("UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<int>("UserAvlSqnbr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USER_AVL_SQNBR")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("AvlNtm")
                        .HasColumnName("AVL_NTM")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("AvlStm")
                        .HasColumnName("AVL_STM")
                        .HasColumnType("time");

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("WeekdayNbr")
                        .HasColumnName("WEEKDAY_NBR")
                        .HasColumnType("int");

                    b.HasKey("Uid", "UserAvlSqnbr")
                        .HasName("PK_TUSERAVL");

                    b.ToTable("DisponibilitesUtilisateur");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.ElementsCompetence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int>("ElementCompetenceSqnbr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ElementCompetenceSQNBR")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdentityKeyCompetences")
                        .HasColumnType("int");

                    b.Property<string>("Libele")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdentityKeyCompetences", "ElementCompetenceSqnbr")
                        .IsUnique()
                        .HasName("unique_TSKLELEM");

                    b.ToTable("ElementsCompetence");

                    b.HasComment("Élément de compétence");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.Examens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("PoidExamen")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("TypeExamenCode")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Examens");

                    b.HasComment("Entité de base pour un examen");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.ExamensCertificatifsNonsFinals", b =>
                {
                    b.Property<string>("CoursId")
                        .HasColumnName("CoursID")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasComment("Code d'identification d'un cours")
                        .HasMaxLength(10);

                    b.Property<string>("TchrUid")
                        .HasColumnName("TCHR_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<DateTime>("PlnVsnCdttm")
                        .HasColumnName("PLN_VSN_CDTTM")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasColumnName("SessionID")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("ExamenId")
                        .HasColumnName("ExamenID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("CoursId", "TchrUid", "PlnVsnCdttm", "SessionId", "ExamenId")
                        .HasName("PK_TCERTEXAM");

                    b.HasAlternateKey("CoursId", "ExamenId", "PlnVsnCdttm", "SessionId", "TchrUid");

                    b.HasIndex("ExamenId");

                    b.ToTable("ExamensCertificatifsNonsFinals");

                    b.HasComment("Examen certificatif");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.ExamensElementsCompetences", b =>
                {
                    b.Property<int>("IdentityKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ElementCompetenceId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ExamenId")
                        .HasColumnName("ExamenID")
                        .HasColumnType("int");

                    b.Property<decimal?>("PoidElement")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdentityKey")
                        .HasName("PK__tmp_ms_x__796424B81103DB33");

                    b.HasIndex("ElementCompetenceId");

                    b.HasIndex("ExamenId");

                    b.ToTable("ExamensElementsCompetences");

                    b.HasComment("Association examen -- élément de compétence");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.ExamensFinalsCertificatifs", b =>
                {
                    b.Property<string>("CoursId")
                        .HasColumnName("CoursID")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasComment("Code d'identification d'un cours")
                        .HasMaxLength(10);

                    b.Property<DateTime>("VsnCdttm")
                        .HasColumnName("VSN_CDTTM")
                        .HasColumnType("datetime");

                    b.Property<int>("ExamenId")
                        .HasColumnName("ExamenID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("CoursId", "VsnCdttm", "ExamenId")
                        .HasName("PK_TFNLEXAM");

                    b.HasAlternateKey("CoursId", "ExamenId", "VsnCdttm");

                    b.HasIndex("ExamenId");

                    b.ToTable("ExamensFinalsCertificatifs");

                    b.HasComment("Examen certificatif final");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.MaterielsCours", b =>
                {
                    b.Property<string>("CoursId")
                        .HasColumnName("CoursID")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasComment("Code d'identification d'un cours")
                        .HasMaxLength(10);

                    b.Property<string>("TchrUid")
                        .HasColumnName("TCHR_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<DateTime>("PlnVsnCdttm")
                        .HasColumnName("PLN_VSN_CDTTM")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasColumnName("SessionID")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<short>("MaterielSqnbr")
                        .HasColumnName("MaterielSQNBR")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("CoursId", "TchrUid", "PlnVsnCdttm", "SessionId", "MaterielSqnbr")
                        .HasName("PK_TCRSMTRL");

                    b.HasAlternateKey("CoursId", "MaterielSqnbr", "PlnVsnCdttm", "SessionId", "TchrUid");

                    b.ToTable("MaterielsCours");

                    b.HasComment("Matériel requis");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.PlanCadreCompetenceElements", b =>
                {
                    b.Property<int>("IdentityKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoursId")
                        .IsRequired()
                        .HasColumnName("CoursID")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasComment("Code d'identification d'un cours")
                        .HasMaxLength(10);

                    b.Property<string>("ElementCompetenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("('1F19D42E-3929-487B-9551-FA4C67EC6951')")
                        .HasMaxLength(100);

                    b.Property<string>("LongDescription")
                        .HasColumnType("ntext");

                    b.Property<string>("PrtlSklInd")
                        .HasColumnName("PRTL_SKL_IND")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("TxnmyCd")
                        .HasColumnName("TXNMY_CD")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<DateTime>("VsnCdttm")
                        .HasColumnName("VSN_CDTTM")
                        .HasColumnType("datetime");

                    b.HasKey("IdentityKey")
                        .HasName("PK__tmp_ms_x__796424B8098CBD08");

                    b.HasIndex("ElementCompetenceId");

                    b.HasIndex("CoursId", "VsnCdttm");

                    b.ToTable("PlanCadreCompetenceElements");

                    b.HasComment("Association plan-cadre -- élément de compétence");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.PlansCadres", b =>
                {
                    b.Property<string>("CoursId")
                        .HasColumnName("CoursID")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasComment("Code d'identification d'un cours")
                        .HasMaxLength(10);

                    b.Property<DateTime>("VsnCdttm")
                        .HasColumnName("VSN_CDTTM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateApprobationCadre")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateApprobationCommite")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateApprobationDepartement")
                        .HasColumnType("date");

                    b.Property<string>("DenominationCours")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int?>("HeuresTotalesMaison")
                        .HasColumnType("int");

                    b.Property<int?>("HeuresTotalesPratique")
                        .HasColumnType("int");

                    b.Property<int?>("HeuresTotalesTheorie")
                        .HasColumnType("int");

                    b.Property<string>("IntentionEducative")
                        .HasColumnType("ntext");

                    b.Property<string>("IntentionPedagogique")
                        .HasColumnType("ntext");

                    b.Property<string>("ProgrammeId")
                        .HasColumnName("ProgrammeID")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<decimal?>("Unites")
                        .HasColumnType("decimal(3, 2)");

                    b.HasKey("CoursId", "VsnCdttm")
                        .HasName("PK_TCRSTMPLT");

                    b.ToTable("PlansCadres");

                    b.HasComment("Plan-cadre");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.PlansCours", b =>
                {
                    b.Property<string>("CoursId")
                        .HasColumnName("CoursID")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasComment("Code d'identification d'un cours")
                        .HasMaxLength(10);

                    b.Property<string>("TchrUid")
                        .HasColumnName("TCHR_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<DateTime>("PlnVsnCdttm")
                        .HasColumnName("PLN_VSN_CDTTM")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasColumnName("SessionID")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("CoursId", "TchrUid", "PlnVsnCdttm", "SessionId")
                        .HasName("PK_TCRSPLN");

                    b.HasAlternateKey("CoursId", "PlnVsnCdttm", "SessionId", "TchrUid");

                    b.HasIndex("SessionId");

                    b.ToTable("PlansCours");

                    b.HasComment("Plan de cours");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.ProgrammeCompetences", b =>
                {
                    b.Property<string>("ProgrammeId")
                        .HasColumnName("ProgrammeID")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<int>("DepartementId")
                        .HasColumnName("DepartementID")
                        .HasColumnType("int");

                    b.Property<string>("CompetenceId")
                        .HasColumnName("CompetenceID")
                        .HasColumnType("char(4)")
                        .IsFixedLength(true)
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<bool>("CompetenceEstComplentaire")
                        .HasColumnType("bit");

                    b.Property<bool>("CompetenceEstRequise")
                        .HasColumnType("bit");

                    b.HasKey("ProgrammeId", "DepartementId", "CompetenceId")
                        .HasName("PK__R_SKL_PG__D129735B0D074A76");

                    b.HasAlternateKey("CompetenceId", "DepartementId", "ProgrammeId");

                    b.ToTable("ProgrammeCompetences");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.Programmes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<int>("DepartementId")
                        .HasColumnName("DepartementID")
                        .HasColumnType("int");

                    b.Property<string>("CodeType")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("NombreCompetencesComplementaires")
                        .HasColumnType("int");

                    b.Property<int?>("NombreCompetencesObligatoires")
                        .HasColumnType("int");

                    b.Property<int?>("NombreCompetencesOptionnelles")
                        .HasColumnType("int");

                    b.Property<string>("ProgrammeImg")
                        .HasColumnName("ProgrammeIMG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgrammePdf")
                        .HasColumnName("ProgrammePDF")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("TypeDegreFormation")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("Id", "DepartementId")
                        .HasName("PK__tmp_ms_x__CEB445A66DF6DB7C");

                    b.HasAlternateKey("DepartementId", "Id");

                    b.HasIndex("CodeType");

                    b.HasIndex("TypeDegreFormation");

                    b.ToTable("Programmes");

                    b.HasComment("Programme d'études");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.Sessions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Debut")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Fin")
                        .HasColumnType("date");

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Titre")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TrkUid")
                        .HasColumnName("TRK_UID")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Sessions");

                    b.HasComment("Session");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.TypesFormationsProgrammes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("TypesFormationsProgrammes");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(900)")
                        .IsUnicode(false);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartementId")
                        .HasColumnName("DepartementID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GvnNm")
                        .HasColumnName("GVN_NM")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RcdCdttm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCD_CDTTM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Snm")
                        .HasColumnName("SNM")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DepartementId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.AspNetUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.AspNetUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlanC.EntityDataModel.AspNetUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.AspNetUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.CompetenceContextes", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.Competences", "IdentityKeyCompetenceNavigation")
                        .WithMany("CompetenceContextes")
                        .HasForeignKey("IdentityKeyCompetence")
                        .HasConstraintName("FK__Competenc__Ident__68687968")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.Competences", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.Departements", "Discipline")
                        .WithMany("Competences")
                        .HasForeignKey("DisciplineId")
                        .HasConstraintName("FK_TSKL_TDPMNT")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.CoursActivite", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.PlansCours", "PlansCours")
                        .WithMany("CoursActivite")
                        .HasForeignKey("CoursId", "TchrUid", "PlnVsnCdttm", "SessionId")
                        .HasConstraintName("FK_TCRSACTVT_TCRSPLN")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.CoursCompetenceElements", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.CoursActivite", "IdendityCoursActivityNavigation")
                        .WithMany("CoursCompetenceElements")
                        .HasForeignKey("IdendityCoursActivity")
                        .HasConstraintName("FK__CoursComp__Idend__3F6663D5")
                        .IsRequired();

                    b.HasOne("PlanC.EntityDataModel.CriteresElementCompetence", "IdentityCritereElementCompetenceNavigation")
                        .WithMany("CoursCompetenceElements")
                        .HasForeignKey("IdentityCritereElementCompetence")
                        .HasConstraintName("FK__CoursComp__Ident__3E723F9C")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.CoursRequis", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.PlansCadres", "PlansCadres")
                        .WithMany("CoursRequis")
                        .HasForeignKey("CoursId", "VsnCdttm")
                        .HasConstraintName("FK_TCRSREQ_TCRSTMPLT")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.CriteresElementCompetence", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.ElementsCompetence", "ElementCompetence")
                        .WithMany("CriteresElementCompetence")
                        .HasForeignKey("ElementCompetenceId")
                        .HasConstraintName("FK__CriteresE__Eleme__70FDBF69")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.DisponibilitesUtilisateur", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.AspNetUsers", "U")
                        .WithMany("DisponibilitesUtilisateur")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_TUSERAVL_TUSER")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.ElementsCompetence", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.Competences", "IdentityKeyCompetencesNavigation")
                        .WithMany("ElementsCompetence")
                        .HasForeignKey("IdentityKeyCompetences")
                        .HasConstraintName("FK__ElementsC__Ident__6A50C1DA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.ExamensCertificatifsNonsFinals", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.Examens", "Examen")
                        .WithMany("ExamensCertificatifsNonsFinals")
                        .HasForeignKey("ExamenId")
                        .HasConstraintName("FK_TCERTEXAM_TEXAM")
                        .IsRequired();

                    b.HasOne("PlanC.EntityDataModel.PlansCours", "PlansCours")
                        .WithMany("ExamensCertificatifsNonsFinals")
                        .HasForeignKey("CoursId", "TchrUid", "PlnVsnCdttm", "SessionId")
                        .HasConstraintName("FK_TCERTEXAM_TCRSPLN")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.ExamensElementsCompetences", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.ElementsCompetence", "ElementCompetence")
                        .WithMany("ExamensElementsCompetences")
                        .HasForeignKey("ElementCompetenceId")
                        .HasConstraintName("FK__ExamensEl__Eleme__60C757A0");

                    b.HasOne("PlanC.EntityDataModel.Examens", "Examen")
                        .WithMany("ExamensElementsCompetences")
                        .HasForeignKey("ExamenId")
                        .HasConstraintName("FK_TEXAMSKLELEM_TEXAM")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.ExamensFinalsCertificatifs", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.Examens", "Examen")
                        .WithMany("ExamensFinalsCertificatifs")
                        .HasForeignKey("ExamenId")
                        .HasConstraintName("FK_TFNLEXAM_TEXAM")
                        .IsRequired();

                    b.HasOne("PlanC.EntityDataModel.PlansCadres", "PlansCadres")
                        .WithMany("ExamensFinalsCertificatifs")
                        .HasForeignKey("CoursId", "VsnCdttm")
                        .HasConstraintName("FK_TFNLEXAM_TCRSTMPLT")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.MaterielsCours", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.PlansCours", "PlansCours")
                        .WithMany("MaterielsCours")
                        .HasForeignKey("CoursId", "TchrUid", "PlnVsnCdttm", "SessionId")
                        .HasConstraintName("FK_TCRSMTRL_TCRSPLN")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.PlanCadreCompetenceElements", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.ElementsCompetence", "ElementCompetence")
                        .WithMany("PlanCadreCompetenceElements")
                        .HasForeignKey("ElementCompetenceId")
                        .HasConstraintName("FK__PlanCadre__Eleme__5EDF0F2E");

                    b.HasOne("PlanC.EntityDataModel.PlansCadres", "PlansCadres")
                        .WithMany("PlanCadreCompetenceElements")
                        .HasForeignKey("CoursId", "VsnCdttm")
                        .HasConstraintName("FK_TTMPLTSKLELEM_TCRSTMPLT")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.PlansCours", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.Sessions", "Session")
                        .WithMany("PlansCours")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_TCRSPLN_TSMSTR")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.ProgrammeCompetences", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.Programmes", "Programmes")
                        .WithMany("ProgrammeCompetences")
                        .HasForeignKey("ProgrammeId", "DepartementId")
                        .HasConstraintName("FK_R_SKL_PGM__PGM")
                        .IsRequired();
                });

            modelBuilder.Entity("PlanC.EntityDataModel.Programmes", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.CategoriesProgrammes", "CodeTypeNavigation")
                        .WithMany("Programmes")
                        .HasForeignKey("CodeType")
                        .HasConstraintName("FK_TPGM_TCDTY");

                    b.HasOne("PlanC.EntityDataModel.Departements", "Departement")
                        .WithMany("Programmes")
                        .HasForeignKey("DepartementId")
                        .HasConstraintName("FK_TPGM_TDPTMNT")
                        .IsRequired();

                    b.HasOne("PlanC.EntityDataModel.TypesFormationsProgrammes", "TypeDegreFormationNavigation")
                        .WithMany("Programmes")
                        .HasForeignKey("TypeDegreFormation")
                        .HasConstraintName("FK_TPGM_TPMGFORMTYPE");
                });

            modelBuilder.Entity("PlanC.EntityDataModel.AspNetUsers", b =>
                {
                    b.HasOne("PlanC.EntityDataModel.Departements", "Departement")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("DepartementId")
                        .HasConstraintName("FK_TUSER_TDPTMNT");
                });
#pragma warning restore 612, 618
        }
    }
}
