@*tous les liens que l'utilisateur peut utiliser pour afficher cette page*@
@page "/plancours/create"
@page "/plancours/creation"
@page "/plancours/{id}/create"
@page "/plancours/{id}/creation"
@*fin des liens de page*@
@*authorize la page de sécurité pour cette dernière*@
@attribute [Authorize]
@*using pour les namespaces qui doivent exister pour la fonction de la page*@
@using PlanC.EntityDataModel
@using PlanC.DocumentGeneration.CoursePlan
@using PlanC.DocumentGeneration.CourseTemplate
@using Components.PlanCours
@using System.Collections.Generic
@using Microsoft.EntityFrameworkCore
@using System.IO
@*Injection de la page, dont cette dernière est dépendante*@
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject PCU001Context context

<!-- affichage de l'endroit ou l'utilisateur est -->
<div class="row mb-3">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <!-- Donne accès au portail selon le role de l'utilisateur -->
                <li class="breadcrumb-item"><a href="/"> Portail </a></li>
                <li style="padding: 0 4px;"><i class="fas fa-home" style="font-size: 15px; color: #3f51b5;"></i></li>
                <li class="breadcrumb-item active" aria-current="page"> Nouveau plan cadre </li>
            </ol>
        </nav>
    </div>
</div>



<div class="row">
    <div class="col-12 d-flex justify-content-center">
        @*affiche un progress bar pour que l'utilisateur puisse savoir à quelle étape il est suivi seulement par un current step, une variable --int-- *@
        <PlanC.Client.Components.ProgressBar steps="@(new List<string> { "Session, cadre, politiques", "Calendrier", "Examens", "Matériel", "Révision" })"
                                             Current="CurrentStep"></PlanC.Client.Components.ProgressBar>
    </div>
</div>

<div class="container shadow p-5" style="margin-bottom: 200px">
    @* CascadingValue est une balise pour envoyé à tous les enfants la valeur seulement si nous ne spécifions pas un nom le type est pris pour que l'enfant puisse savoir ou ranger la valeur *@
    <CascadingValue TValue="PCU001Context" Value="context">
        <CascadingValue TValue="FormMode" Value="CurrentMode">
         @* en conséquence du type du formulaire la page change est reformé pour afficher le bon formulaire *@
            @if (CurrentForm is CourseDescriptionForm)
            {
                <PlanC.Client.Components.PlanCours.CourseDescriptionForm @bind-CoursePlan="CoursePlan" @ref="CurrentForm"></PlanC.Client.Components.PlanCours.CourseDescriptionForm>
            }
            else if (CurrentForm is CourseCalendarForm)
            {
                <PlanC.Client.Components.PlanCours.CourseCalendarForm @bind-CoursePlan="CoursePlan" @ref="CurrentForm"></PlanC.Client.Components.PlanCours.CourseCalendarForm>
            }
            else if (CurrentForm is CourseExamForm)
            {
                <PlanC.Client.Components.PlanCours.CourseExamForm @bind-CoursePlan="CoursePlan" @ref="CurrentForm"></PlanC.Client.Components.PlanCours.CourseExamForm>
            }
            else if (CurrentForm is CourseMaterialForm)
            {
                <PlanC.Client.Components.PlanCours.CourseMaterialForm @bind-CoursePlan="CoursePlan" @ref="CurrentForm"></PlanC.Client.Components.PlanCours.CourseMaterialForm>
            }
        </CascadingValue>
    </CascadingValue>
    <div class="container mt-3">
        <div class="row">
            @* tous les liens sont activé selon le current node présenté par les linklist et linklistnode présentant la valeur et le current node dans lequel l'utilisateur est *@
            <div class="col-12 d-flex justify-content-around">
                <!-- appelle fonction javascript permettant d'ajouter le .wasvalidated sur la division du formulaire -->
                <!-- suite au poste validate nous envoyons l'utilisateur vers la deuxième partie celle de remplire les contextes et les éléments de compétence-->
                <button @onclick="NavigatePrevious" disabled="@(CurrentNode.Previous == null)" class="btn btn-primary">Précédent</button>
                <button @onclick="NavigateNext" hidden="@(CurrentNode.Next == null)" disabled="@(CurrentNode.Next == null)" class="btn btn-primary">Suivant</button>
                <a href="" @onclick="FinishForm" hidden="@(CurrentNode.Next != null)" disabled="@(CurrentNode.Next != null)" class="btn btn-primary">Terminer</a>
            </div>
        </div>
    </div>
</div>


<div class="col-12 text-center">
    @if (string.IsNullOrEmpty(id))
    {
        <span class="smallerFontSize">La page ne répond pas? <a href="/plancours/creation" onclick="window.location.reload()" class="reload">Rafraîchir la page.</a></span>
    }
    else
    {
        <span class="smallerFontSize">La page ne répond pas? <a href="/plancours/@id/creation" onclick="window.location.reload()" class="reload">Rafraîchir la page.</a></span>
    }
</div>


<div hidden="@(CurrentNode.Next != null)" disabled="@(CurrentNode.Next != null)" class="col-12 d-flex justify-content-center m-3">
    <!-- Click pour faire -->
    <a @onclick="Export" class="btn btn-outline-primary">Gérérer le plan-cadre</a>
</div>



@code{
    [Parameter]
    // le paramètre doit prendre le même nom que ce qui est dans le url
    public string id { get; set; }
    [Parameter]
    // un type peut être passé en paramètre seulement si elle est en clé primaire ou si elle est donnée en paramètre de balisage
    public PlansCours CoursePlan { get; set; } = new PlansCours();
    [CascadingParameter]
    // le paramètre en cascade donné par le parent selon le type
    public FormMode CurrentMode { get; set; }

    // module de step pour afficher le bon component
    public CoursePlanInputFormComponent CurrentForm { get; set; }
    private LinkedListNode<CoursePlanInputFormComponent> CurrentNode { get; set; }
    private LinkedList<CoursePlanInputFormComponent> Forms { get; set; }

    private int CurrentStep = 0;

    public void Export()
    {
        // trouve la bonne entité dans la base de donné tout en ordonnant ce qui est au retour
        PlansCadres plansCadre = context.PlansCadres.Where(e => e.CoursId.Trim() == CoursePlan.CoursId.Trim())
            .OrderByDescending(p => p.VsnCdttm).FirstOrDefault();
        // génère le document
        var _document = ToDocumentModel(CoursePlan, plansCadre, context);

        // ouverture du stream pour envoyé ver le socket du client connecté
        using (var stream = new MemoryStream())
        {
            // ouverture de stream pour créer un document et qui sera lui envoyé au client en stream array transformé en byte array
            using (var document = PlanC.DocumentGeneration.CoursePlan.DocumentFactory.Create(stream))
            {
                var editor = new PlanC.DocumentGeneration.CoursePlan.DocumentEditor(document);
                editor.Model = _document;
                // sauvegarde le changement mis au document à la suite d'avoir appliquer le model sur le document venant d'être
                // créer à partir du script static de document generation
                editor.ApplyChanges();
            }
            JS.SaveAs("plancours.docx", stream.ToArray());
        }
    }

    protected override void OnInitialized()
    {
        //Si la page reçoit un ID spécifique, ce processus le charge en mémoire. Sinon, il génère un nouvel objet.
        PlansCours SpecifiedPlan = context.PlansCours.Include(p => p.ExamensCertificatifsNonsFinals)
                                                            .Where(p => p.CoursId.Trim() == this.id)
                                                            .OrderByDescending(p => p.PlnVsnCdttm)
                                                            .FirstOrDefault();

        // spécéfication de comment le formulaire doit être
        // remis au client, soit en mode edit, create
        if (SpecifiedPlan != null)
        {
            CoursePlan = SpecifiedPlan;
            CurrentMode = FormMode.EDIT;
        }
        else
        {
            CoursePlan = new PlansCours()
            {
                PlnVsnCdttm = DateTime.Now,
                TchrUid = "testusr"
            };
            CurrentMode = FormMode.CREATE;
        }


        //Création des composantes du wizard et ajout à la liste liée.
        Forms = new LinkedList<CoursePlanInputFormComponent>();

        Forms.AddLast(new CourseDescriptionForm());
        Forms.AddLast(new CourseCalendarForm());
        Forms.AddLast(new CourseExamForm());
        Forms.AddLast(new CourseMaterialForm());

        CurrentNode = Forms.First;
        CurrentForm = CurrentNode.Value;
        StateHasChanged();
    }

    private async void NavigateNext()
    {
        if (await CurrentForm.SaveProgress())
        {
            CurrentNode = CurrentNode.Next;
            CurrentForm = CurrentNode.Value;
            CurrentMode = FormMode.EDIT;
            CurrentStep++;
            StateHasChanged();
        }
        else
        {
            //TODO error message
            return;
        }
    }
    private void NavigatePrevious()
    {
        CurrentNode = CurrentNode.Previous;
        CurrentForm = CurrentNode.Value;
        CurrentStep--;
        StateHasChanged();
    }

    private void FinishForm()
    {
        CurrentForm.SaveProgress();
    }

    public enum FormMode
    {
        CREATE = 1,
        EDIT = 2
    }

    public CoursePlan ToDocumentModel(PlansCours plan, PlansCadres template, PCU001Context context)
    {
        CourseTemplate ParentTemplateDocumentModel = FileUtil.GetWordTemplate(template, context);

        CoursePlan model = new CoursePlan();

        model.CourseId = plan.CoursId;
        model.Campus = "Gabrielle-Roy";
        model.Exams.Add(ParentTemplateDocumentModel.FinalExam);
        foreach (Examens exam in plan.ExamensCertificatifsNonsFinals.Select(ex => ex.Examen))
        {
            model.Exams.Add(new DocumentGeneration.Common.Exam()
            {
                Title = exam.Qualification,
                Weight = exam.PoidExamen
            });
        }
        model.Introduction = ParentTemplateDocumentModel.CourseDescription.Split(Environment.NewLine);

        plan.CoursActivite.OrderBy(act => act.ActvtSqnbr);
        foreach (CoursActivite act in plan.CoursActivite)
        {
            int CurrentWeek = 1;
            model.ActivityPeriodEntries.Add(new ActivityCalendarPeriodEntry()
            {
                Content = act.ActvtDesc.Split(Environment.NewLine),
                PeriodLabel = $"Semaine {CurrentWeek} - Semaine {CurrentWeek + act.ActvtLgnth - 1}",
                SkillElements = new System.Collections.ObjectModel
                    .Collection<string>(act.CoursCompetenceElements.Select(ase => ase.IdentityCritereElementCompetenceNavigation.DescriptionCritere).ToList())
            });
            CurrentWeek += act.ActvtLgnth.GetValueOrDefault();
        }

        model.PedagogicalIntents = ParentTemplateDocumentModel.PedagogicalIntent.Split(Environment.NewLine);

        model.Prerequisites = ParentTemplateDocumentModel.Prerequisites;

        foreach (MaterielsCours mat in plan.MaterielsCours)
        {
            model.RequiredMaterial.Add($"{mat.Description}");
        }

        model.Session = plan.Session.Titre;
        model.Skills = ParentTemplateDocumentModel.Skills;

        model.Teacher = new Teacher()
        {
            Name = plan.TchrUid
        };

        model.TimeDistribution = ParentTemplateDocumentModel.TimeDistribution;

        return model;
    }

}
