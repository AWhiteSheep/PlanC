@page "/programmes"
@*context de la base de donné et js runtime*@
@inject PCU001Context _context
@inject IJSRuntime JSRuntime
@* trouver le userid *@
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Newtonsoft.Json
@* les cdn(s) doivent être ajoutés pour le bon fonctionnement du componant *@

<!-- Section de navigation -->
<div class="row mb-3">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <!-- Donne accès au portail selon le role de l'utilisateur -->
                <li class="breadcrumb-item"><a href="/"> Portail </a></li>
                <li style="padding: 0 4px;"><i class="fas fa-home" style="font-size: 15px; color: #3f51b5;"></i></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item active" aria-current="page"> Programmes </li>
            </ol>
        </nav>
    </div>
    <!-- Message distiné pour le groupe d'administration -->
    <div class="col-12">
        <div class="alert alert-light show shadow" role="alert">
            <div class="alert-icon text-warning">
                <i class="fas fa-exclamation-triangle"></i>
            </div>
            <div class="alert-text">
                Veuillez vérifier que tous les plans cadres pour les programmes d'informatique soit à jour pour le 15 novembre.
            </div>
        </div>
    </div>
</div>

<div style="position:relative; margin-bottom: 150px;">
    <!-- -->
    @if (programmes == null)
    {
        <p><em>En cours de chargement...</em></p>
        <div class="col-12 text-center">
            <span class="smallerFontSize">La page ne répond pas? <a href="/programmes" onclick="window.location.reload()" class="reload">Rafraîchir la page.</a></span>
        </div>

    }
    else
    {
            <div class="container">
                @if (!programmes.Any())
                {
                    <p><em>Nous avons trouvé aucun programme.</em></p>
                }
                else
                {
                    <!-- DataTales Example -->
                    <div hidden="@(IsCreating)" class="card shadow mb-4">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-primary">Table des programmes</h6>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                                    <thead>
                                        <tr>
                                            <th class="pr-3">Nom</th>
                                            <th class="pr-3">Identifiant</th>
                                            <th class="pr-3">Département</th>
                                            <th class="p-0">Pondération (#-#-#)</th>
                                            <th class="pr-3"> Pdf </th>
                                            <th class="pr-3"> Image </th>
                                        </tr>
                                    </thead>
                                    <tfoot>
                                        <tr>
                                            <th colspan="4">
                                                <hr />
                                            </th>
                                        </tr>
                                    </tfoot>
                                    <tbody>
                                        @foreach (var prog in programmes)
                                        {
                                            <tr>
                                                <td valign="top" class="p-0">@prog.Designation</td>
                                                <td valign="top" class="p-0">@prog.Id</td>
                                                <td valign="top" class="p-0">@prog.DepartementId</td>
                                                <td valign="top" class="p-0">
                                                    <table width="100%">
                                                        <tr>
                                                            <td valign="top" align="center" class="p-0">@prog.NombreCompetencesObligatoires</td>
                                                            <td valign="top" align="center" class="p-0">@prog.NombreCompetencesComplementairesAccessor</td>
                                                            <td valign="top" align="center" class="p-0">@prog.NombreCompetencesOptionnellesAccessor</td>
                                                        </tr>
                                                    </table>
                                                </td>
                                                <td class="p-0"><a href="@prog.ProgrammePdfAccess">@prog.ProgrammePdfAccess.Split('/').Last()</a></td>
                                                <td class="p-0"><img style="height: 50px; width: 50px" src="@prog.ProgrammeImgAccess" /></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <AuthorizeView Roles="Admin,Coordonnateur">
                                <button class="btn btn-primary" @onclick="Add"> Ajouter un département </button>
                            </AuthorizeView>
                        </div>
                    </div>
                }

                <div hidden="@(!IsCreating)" class="card shadow col-12">
                    <div class="card-header">
                        <div class="d-flex">
                            <button class="btn btn-danger" @onclick="Cancel">Annuller</button>
                        </div>
                    </div>
                    <EditForm Model="newProgram" OnValidSubmit="SaveAsync">
                        <DataAnnotationsValidator />
                        <div class="form-group col-12">
                            <label class="control-label"> Identifiant du nouveau programme </label>
                            <InputText class="form-control" @bind-Value="newProgram.Id" />
                            <ValidationMessage For="() => newProgram.Id"></ValidationMessage>
                        </div>
                        <div class="form-group col-12">
                            <label class="control-label"> Identifiant du nouveau programme </label>
                            <InputText class="form-control" @bind-Value="newProgram.Id" />
                            <ValidationMessage For="() => newProgram.Id"></ValidationMessage>
                        </div>
                        <div class="form-group col-12">
                            <label class="control-label"> Nom du programme </label>
                            <InputText class="form-control" @bind-Value="newProgram.Designation" />
                            <ValidationMessage For="() => newProgram.Designation"></ValidationMessage>
                        </div>
                        <div class="form-group col-12">
                            <label class="control-label"> Choix du département </label>
                            <InputSelect class="form-control" @bind-Value="newProgram.DepartementIdHasString">
                                <option value=""></option>
                                @foreach (var departement in choixDepartement)
                                {
                                <option value="@departement.Id.ToString()">@departement.Titre</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => newProgram.DepartementIdHasString"></ValidationMessage>
                        </div>
                        <div class="form-group col-12">
                            <label class="control-label"> Déscription </label>
                            <InputTextArea class="form-control" rows="4" @bind-Value="newProgram.Description"></InputTextArea>
                            <ValidationMessage For="() => newProgram.Description"></ValidationMessage>
                        </div>
                        <div class="form-group col-12">
                            <label class="control-label"> Url vers le pdf - champ optionnel </label>
                            <InputText class="form-control" @bind-Value="newProgram.ProgrammePdfAccess" />
                            <ValidationMessage For="() => newProgram.ProgrammePdfAccess"></ValidationMessage>
                        </div>
                        <div class="form-group col-12">
                            <label class="control-label"> Url vers l'image - champ optionnel </label>
                            <InputText class="form-control" @bind-Value="newProgram.ProgrammeImgAccess" />
                            <ValidationMessage For="() => newProgram.ProgrammeImgAccess"></ValidationMessage>
                        </div>
                        <button type="submit" class="btn btn-primary">Créer</button>
                    </EditForm>
                </div>
            </div>
        <div class="col-12 text-center">
            <span class="smallerFontSize">La page ne répond pas? <a href="/programmes" onclick="window.location.reload()" class="reload">Rafraîchir la page.</a></span>
        </div>

    }
</div>
@code {
    private List<Programmes> programmes;
    private List<Departements> choixDepartement = new List<Departements>();
    private Programmes newProgram = new Programmes();
    private bool IsCreating;
    private bool IsValidating = false;
    private bool IsTitleValid;
    private bool IsDescriptionValid;

    protected override void OnInitialized()
    {
        // contextualise les programmes
        programmes = _context.Programmes.ToList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeAsync<string>("initTable", "#dataTable");
        }
    }

    private void Add()
    {
        // affiche le formulaire pour que l'utilisateur puisse entrer de nouvelles données
        newProgram = new Programmes();
        if (!choixDepartement.Any())
            choixDepartement = _context.Departements.ToList();
        IsCreating = true;
    }

    private void Cancel()
    {
        // cancel la demande du formulaire et retourne la table
        newProgram = new Programmes();
        IsCreating = false;
    }

    private async void SaveAsync()
    {
        //sauvegarde le nouveau programme dans la base de données
        // ajoute les données dans la database
        try
        {
            // authentification de l'utilisateur avec le service injecté inscrit en haut
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // est le numéro de la personne connecté
            newProgram.TrkUid = user.Identity.Name;
            _context.Programmes.Add(newProgram);
            _context.SaveChanges();
            // changement de la référence pour renouveler le ui.
            newProgram = new Programmes();
            // update le ui
            StateHasChanged();
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeAsync<string>("alertDatabaseError");
        }
        StateHasChanged();
    }
}