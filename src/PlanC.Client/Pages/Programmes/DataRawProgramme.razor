@page  "/admin/programmes"
@using PlanC.EntityDataModel
@using Newtonsoft.Json
@using Syncfusion.EJ2.Blazor.Grids
@*context de la base de donné et js runtime*@
@inject PCU001Context _context
@inject IJSRuntime JSRuntime
@attribute [Authorize("AuthorizationNemesisGroupPolicy")]
@* les cdn(s) doivent être ajoutés pour le bon fonctionnement du componant *@


<!-- Section de navigation -->
<div class="row mb-3">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <!-- Donne accès au portail selon le role de l'utilisateur -->
                <li class="breadcrumb-item"><a href="/"> Portail </a></li>
                <li style="padding: 0 4px;"><i class="fas fa-home" style="font-size: 15px; color: #3f51b5;"></i></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item"> <a href="/programmes">Programmes</a></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item active" aria-current="page"> Gestion des programmes </li>
            </ol>
        </nav>
    </div>
</div>

@if (programmes == null)
{
    <p><em>En cours de chargement...</em></p>
}
else if (!programmes.Any())
{
    <p><em>Nous avons trouvé aucun programme.</em></p>
}
else
{
    <div class="col-12">
        <div class="card shadow table-responsive">
            <div class="card-body">
                <!-- Module table des départements -->
                <table id="table" class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Titre du programmes</th>
                            <th scope="col">ID</th>
                            <th scope="col">Département ID</th>
                            <th scope="col" style="width: 60px;">Nombre de compétences obligatoires</th>
                            <th scope="col">Nombre de compétences optionnelles</th>
                            <th scope="col">Nombre de compétences complémentaires</th>
                            <td></td>
                        </tr>
                    </thead>
                    <tbody id="table">
                        @foreach (Programmes programme in programmes)
                        {
                            <tr>
                                <th scope="row">@programme.Designation</th>
                                <td>@programme.Id</td>
                                <td>@programme.DepartementId</td>
                                <td class="text-center">@programme.NombreCompetencesObligatoires</td>
                                <td class="text-center">@programme.NombreCompetencesOptionnelles</td>
                                <td class="text-center">@programme.NombreCompetencesComplementaires</td>
                                <td class="d-flex">
                                    <button type="button" class="btn btn-primary mr-2" @onclick="@(() => Edit(@programme.Id, @programme.DepartementId))" data-toggle="modal" data-target="#exampleModalCenter">modifier</button>
                                    <button class="btn btn-danger">Supprimer</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
<!-- Modal -->
@if (SelectedItem != null)
{
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalCenterTitle"> @SelectedItem.Id @SelectedItem.DepartementId </h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@SelectedItem" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="designation">Désignation du programme: </label>
                            <InputText id="designation" @bind-Value="SelectedItem.Designation" />
                        </div>
                        <div class="form-group">
                            <label for="obligatoire">Nombre de compétences obligatoires: </label>
                            <InputNumber id="obligatoire" @bind-Value="SelectedItem.NombreCompetencesObligatoires" />
                        </div>
                        <div class="form-group">
                            <label for="optionnelles">Nombre de compétences optionnelles: </label>
                            <InputNumber id="optionnelles" @bind-Value="SelectedItem.NombreCompetencesOptionnelles" />
                        </div>
                        <div class="form-group">
                            <label for="complementaires">Nombre de compétences complementaires: </label>
                            <InputNumber id="complementaires" @bind-Value="SelectedItem.NombreCompetencesComplementaires" />
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal"></button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Programmes SelectedItem;
    List<Programmes> programmes;

    protected override void OnInitialized()
    {
        JSRuntime.InvokeAsync<string>("requestScripts", JsonConvert.SerializeObject(new string[] { "https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js" }));
        JSRuntime.InvokeAsync<string>("requestScripts", JsonConvert.SerializeObject(new string[] { "/js/fr-FR.js", "https://cdn.datatables.net/1.10.20/js/dataTables.bootstrap4.min.js" }));
        programmes = _context.Programmes.ToList();
    }

    protected void Change()
    {
        _context.SaveChanges();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeAsync<string>("initTable", "#table");
            JSRuntime.InvokeAsync<string>("requestScripts", JsonConvert.SerializeObject(new string[] { "/js/generalAsyncJs.js" }));
        }
    }

    void Edit(string id, int depId)
    {
        SelectedItem = programmes.First(e => e.Id == id && e.DepartementId == depId);
        JSRuntime.InvokeAsync<string>("showModal", "#exampleModalCenter");
    }
    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }
}
