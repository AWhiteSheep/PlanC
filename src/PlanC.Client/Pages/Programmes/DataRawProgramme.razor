@page  "/admin/programmes"
@inject PCU001Context _context
@inject NavigationManager _NavigationManager
@inject IJSRuntime Js
@using PlanC.EntityDataModel
@using Newtonsoft.Json
@using Syncfusion.EJ2.Blazor.Grids
@using Microsoft.AspNetCore.Components
@using Syncfusion.EJ2.Blazor.Buttons
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore
@using PlanC.Client
@using System.Linq
@using Syncfusion.EJ2.Blazor.Navigations
@attribute [Authorize]
@* les cdn(s) doivent être ajoutés pour le bon fonctionnement du componant *@


<!-- Section de navigation -->
<div class="row mb-3">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <!-- Donne accès au portail selon le role de l'utilisateur -->
                <li class="breadcrumb-item"><a href="/"> Portail </a></li>
                <li style="padding: 0 4px;"><i class="fas fa-home" style="font-size: 15px; color: #3f51b5;"></i></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item"> <a href="/programmes">Programmes</a></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item active" aria-current="page"> Gestion des programmes </li>
            </ol>
        </nav>
    </div>
</div>

<div class="row justify-content-center">
    <!-- Affiche tous les départements -->
    <div class="col-12" hidden="@(formLoadDisplay)">
        <EjsButton @onclick="ToggleForm">Ajout d'un programme</EjsButton>
        <br />
        @if (programmes != null)
        {
            <EjsGrid DataSource="@programmes" AllowSorting="true" AllowPaging="true" 
                     ContextMenuItems="@(new List<ContextMenuItemModel>() {new ContextMenuItemModel { 
                                             Text = "Voir le programme", Target = ".e-content", Id = "edit" }})">
                <GridPageSettings PageSize="8"></GridPageSettings>
                <!-- Les événements se passant sur la table et les paramètre -->
                <GridEvents ContextMenuItemClicked="OnContextMenuClick" RowSelected="RowSelectHandler" RowDeselected="() => Selected = null" TValue="Programmes"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(Selected.Id) HeaderText="Identifiant du programme"></GridColumn>
                    <GridColumn Field=@nameof(Selected.Departement.Titre) HeaderText="Département"></GridColumn>
                    <GridColumn Field=@nameof(Selected.Designation) HeaderText="Nom"></GridColumn>
                    <GridColumn Field=@nameof(Selected.NombreCompetencesObligatoiresAccessor) HeaderText="NB compétence obligatoire"></GridColumn>             
                    <GridColumn Field=@nameof(Selected.RcdCdttmAccess) HeaderText="Date du dernier enregistrement" Format="yMd" Type=ColumnType.Date></GridColumn>
                </GridColumns>
            </EjsGrid>
        }
        else if (loadFailed)
        {
            <a href="" class="reload">Recharger la page</a>
        }
        else
        {
            <h1>En chargement...</h1>
        }
    </div>
    <div hidden="@(!formLoadDisplay)" class="col-12" id="exampleModalCenter">
        <EjsButton @onclick="ToggleForm">Fermer</EjsButton>
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    @if (Selected != null)
                    {
                        <div class="row">
                            <div class="col-12">
                                <h4 class="modal-title" id="exampleModalCenterTitle"> Nouveau programme </h4>
                                <button @onclick="ToggleForm" type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        </div>
                        <EditForm Model="@Selected" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="form-group">
                                <label for="designation">Identifiant du programme: </label>
                                <InputText class="col-12" id="designation" @bind-Value="Selected.Id" />
                            </div>
                            <div class="form-group">
                                <label for="designation">Désignation du programme: </label>
                                <InputText class="col-12" id="designation" @bind-Value="Selected.Designation" />
                            </div>
                            <div class="form-group">
                                <label for="designation">Département: </label>
                                <InputSelect class="col-12" id="designation" @bind-Value="Selected.DepartementIdHasString">
                                    @foreach (var departement in departements)
                                    {
                                        <option value="@departement.Id">@departement.Titre</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="form-group">
                                <label for="obligatoire">Nombre de compétences obligatoires: </label>
                                <InputNumber class="col-12" id="obligatoire" @bind-Value="Selected.NombreCompetencesObligatoiresAccessor" />
                            </div>
                            <div class="form-group">
                                <label for="optionnelles">Nombre de compétences optionnelles: </label>
                                <InputNumber class="col-12" id="optionnelles" @bind-Value="Selected.NombreCompetencesComplementairesAccessor" />
                            </div>
                            <div class="form-group">
                                <label for="complementaires">Nombre de compétences complementaires: </label>
                                <InputNumber class="col-12" id="complementaires" @bind-Value="Selected.NombreCompetencesOptionnellesAccessor" />
                            </div>
                            <div class="form-group">
                                <label for="complementaires">Url de l'image: </label>
                                <InputText class="col-12" id="image" @bind-Value="Selected.ProgrammeImg" />
                            </div>
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>

</div>
<!-- Modal -->


<div class="col-12 text-center">
    <span class="smallerFontSize">La page ne répond pas? <a href="/admin/programmes" onclick="window.location.reload()" class="reload">Rafraîchir la page.</a></span>
</div>

<style>
    .image img {
        height: 55px;
        width: 55px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0, 0, 0, 0.2);
    }
</style>

@code {
    private Programmes Selected;
    List<Programmes> programmes;
    List<Departements> departements;
    private bool loadFailed;
    private bool formLoadDisplay = false;
    private bool isEditing = false;
    [Parameter]
    public bool hasAdmin { get; set; } = true;

    protected override void OnInitialized()
    {
        programmes = _context.Programmes.Include(d => d.Departement).ToList();
        departements = _context.Departements.ToList();
    }

    protected void Change()
    {
        _context.SaveChanges();
    }

    protected void Edit()
    {
        formLoadDisplay = true;
        isEditing = true;
    }

    private void HandleValidSubmit()
    {
        if (!isEditing && (_context.Programmes
            .FirstOrDefault(e => e.DepartementId == Selected.DepartementId
            && e.Id == Selected.Id) == null))
        {
            _context.Add(Selected);
        }
        _context.SaveChanges();
        ToggleForm();
        StateHasChanged();
    }

    public void ToggleForm()
    {
        isEditing = false;
        formLoadDisplay = !formLoadDisplay;
        Selected = new Programmes();
    }

    public void RowSelectHandler(RowSelectEventArgs<Programmes> args)
    {
        Selected = programmes.FirstOrDefault(e => e.Id == args.Data.Id && e.DepartementId == args.Data.DepartementId);
    }

    public void OnContextMenuClick(MenuEventArgs args)
    {
        if (args.Item.Id == "edit")
        {
            Edit();
        }
    }
}
