@inject PCU001Context context

<EditForm Model="skill" id="elementForm" class="row">
    @if (!string.IsNullOrEmpty(Message)) 
    {
        <div class="text-danger col-12" style="display:flex; flex-wrap: wrap;">
            <div class="alert alert-danger" style="width:100%;">@Message</div>
        </div>
    }
    @foreach (var context in skill.ElementsCompetence)
    {
        <div class="col-sm-12 mb-3">
            <div class="input-group">
                <input type="text" class="form-control" @bind="context.Libele" placeholder="Un contexte de réalisation" aria-label="Contexte de réalisation deux bouttons" aria-describedby="button-addon-context-@(skill.ElementsCompetence.IndexOf(context)+1)" />
                <div class="input-group-append" id="button-addon-context-@(skill.ElementsCompetence.IndexOf(context)+1)">
                    <button class="btn btn-outline-secondary" @onclick="@(() => RemoveElement(context.ElementCompetenceSqnbr))" type="button"><i class="fas fa-trash"></i></button>
                </div>
            </div>
        </div>
    }
    <div class="col-sm-12 row justify-content-center">
        <div class="col-sm-4" style="font-weight: 400;">
            <div class="input-group">
                <label> Nouvel élément: </label>
                @if(!string.IsNullOrEmpty(newMessage))
                {
                    <div class="text-danger col-12" style="display:flex; flex-wrap: wrap;">
                        <div class="alert alert-danger" style="width:100%;">@newMessage</div>
                    </div>
                }
                <input type="text" class="form-control" @bind="currentElement.Libele" placeholder="Un contexte de réalisation" />
                <button class="btn btn-success w-100" @onclick="@(() => AddElement())">Ajouter un contexte <i class="fas fa-plus-circle ml-3" style="vertical-align: middle;"></i></button>
            </div>
        </div>
    </div>
    <div class="col-12 d-flex justify-content-end">
        <!-- appelle fonction javascript permettant d'ajouter le .wasvalidated sur la division du formulaire -->
        <!-- suite au poste validate nous envoyons l'utilisateur vers la deuxième partie celle de remplire les contextes et les éléments de compétence-->
        <button @onclick="OnSubmit" class="btn btn-primary">Suivant</button>
    </div>
</EditForm>


@code {
    // recoit en cascade l'instance de la compétence
    [CascadingParameter]
    protected Competences skill { get; set; }

    protected ElementsCompetence currentElement = new ElementsCompetence();

    [Parameter]
    public EventCallback<MouseEventArgs> OnSubmit { get; set; }

    public string Message { get; set; }
    public string newMessage { get; set; }

    protected override void OnInitialized()
    {
    }

    // supprime le context donné en paramètre
    async void RemoveElement(byte id)
    {
        var list = skill.ElementsCompetence;
        list.Remove(list.First(e => e.ElementCompetenceSqnbr == id));
        Console.WriteLine($"SQL return code: {await context.SaveChangesAsync()}");
        StateHasChanged();
    }


    // ajoute un context pour la compétence donnée
    async void AddElement()
    {
        if (string.IsNullOrEmpty(currentElement.Libele))
        {
            newMessage = "S'il vous plait inscrire le titre.";
        }
        else
        {
            newMessage = "";
            skill.ElementsCompetence.Add(currentElement);
            Console.WriteLine($"SQL return code: {await context.SaveChangesAsync()}");
            StateHasChanged();
        }
    }
}