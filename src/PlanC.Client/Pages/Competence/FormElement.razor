@inject PCU001Context context

<EditForm Model="skill" id="elementForm" class="row">
    @if (Message != "") 
    {        
        <div class="text-danger col-12" style="display:flex; flex-wrap: wrap;">
            <div class="alert alert-danger" style="width:100%;">@Message</div>
        </div>
    }
    @foreach (var context in skill.ElementsCompetence)
    {
        <div class="col-sm-12 mb-3">
            <div class="input-group">
                <input type="text" class="form-control" @bind="context.Libele" placeholder="Un contexte de réalisation" aria-label="Contexte de réalisation deux bouttons" aria-describedby="button-addon-context-@(skill.ElementsCompetence.IndexOf(context)+1)" />
                <div class="input-group-append" id="button-addon-context-@(skill.ElementsCompetence.IndexOf(context)+1)">
                    <button class="btn btn-outline-secondary" @onclick="@(() => RemoveElement(context.ElementCompetenceSqnbr))" type="button"><i class="fas fa-trash"></i></button>
                </div>
            </div>
        </div>
    }
    <div class="col-sm-12 row justify-content-center">
        <div class="col-sm-4" style="font-weight: 400;">
            <button class="btn btn-success w-100" @onclick="@(() => AddElement())">Ajouter un contexte <i class="fas fa-plus-circle ml-3" style="vertical-align: middle;"></i></button>
        </div>
    </div>
    <div class="col-sm-2">
        <!-- appelle fonction javascript permettant d'ajouter le .wasvalidated sur la division du formulaire -->
        <!-- suite au poste validate nous envoyons l'utilisateur vers la deuxième partie celle de remplire les contextes et les éléments de compétence-->
        <button @onclick="OnSubmit" class="btn btn-primary">Suivant</button>
    </div>
</EditForm>


@code {
    // recoit en cascade l'instance de la compétence
    [CascadingParameter]
    protected Competences skill { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnSubmit { get; set; }

    public string Message { get; set; }

    protected override void OnInitialized()
    {
        if (skill.ElementsCompetence.Count <= 0)
        {
            skill.AddElement(null);
        }
    }

    // supprime le context donné en paramètre
    async void RemoveElement(int id)
    {
        var list = skill.ElementsCompetence;
        list.Remove(list.First(e => e.ElementCompetenceSqnbr == id));
        Console.WriteLine($"SQL return code: {await context.SaveChangesAsync()}");
        StateHasChanged();
    }


    // ajoute un context pour la compétence donnée
    async void AddElement()
    {
        if (skill.ElementsCompetence.Any(e => string.IsNullOrEmpty(e.Libele)))
        {
            Message = "S'il vous plait inscrire les libélés manquant.";
        }
        else
        {
            Message = "";
            skill.AddElement(null);
            Console.WriteLine($"SQL return code: {await context.SaveChangesAsync()}");
            StateHasChanged();
        }
    }
}