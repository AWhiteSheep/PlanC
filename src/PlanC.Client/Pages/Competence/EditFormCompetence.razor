@using Microsoft.EntityFrameworkCore
<!-- STEP 1 -->

<EditForm EditContext="@CompetenceForm" OnValidSubmit="HandleValidCompetence" id="competenceForm" class="row">
    <DataAnnotationsValidator />
    <!-- Sommaire de la validation si des erreurs existent -->
    <div class="text-danger col-12" style="display:flex; flex-wrap: wrap;">
        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert alert-danger" style="width:100%; display: block !important">
                @StatusMessage @if (isDuplicate) {<a onmouseup="location.href = '/departement/@skill.DisciplineId/competence/@duplicate.CompetenceId/create';" href="/departement/@skill.DisciplineId/competence/@duplicate.CompetenceId/create"> ici</a>}.
            </div>
        }
        <ValidationSummary />
    </div>
    <!-- Valeur pour le numéro de la compétence -->
    <div class="col-sm-6">
        <div class="form-group">
            <label for="competenceId" class="control-label"> Numéro de la compétence: </label>
            @if (!isEditing)
            {
                <InputText id="competenceId" class="form-control" placeholder="Numéro de la compétence ####" @bind-Value="@(skill.CompetenceId)" />
                <div class="invalid-feedback">
                    <ValidationMessage For="@(() => skill.CompetenceId)" />
                </div>
            }
            else
            {
                <InputText readonly id="competenceId" class="form-control" placeholder="Numéro de la compétence ####" @bind-Value="@(skill.CompetenceId)" />
                <div class="invalid-feedback">
                    <ValidationMessage For="@(() => skill.CompetenceId)" />
                </div>
            }
        </div>
    </div>
    <!-- Valeur pour l'identification du cours -->
    <div class="col-sm-6">
        <div class="form-group">
            <label class="control-label" for="CrsId"> Identifiant du cours: </label>
            <PlanC.Client.Components.Models.NumberSelectComponent @bind-Value="@(skill.DisciplineId)" class="form-control">
                @foreach (Departements departement in departements)
                {
                    <option value="@departement.Id">@departement.Titre</option>
                }
            </PlanC.Client.Components.Models.NumberSelectComponent>
            <div class="invalid-feedback">
                <ValidationMessage TValue="int" For="@(() => skill.DisciplineId)" />
            </div>
        </div>
    </div>
    <!-- Valeur pour l'énoncé de la compétence -->
    <div class="col-sm-12">
        <div class="form-group">
            <label class="control-label"> Énoncé de la compétence: </label>
            <InputText class="form-control" placeholder="Énoncé de la compétence" @bind-Value="@(skill.Enonce)" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => skill.Enonce)" class="text-danger" />
            </div>
        </div>
    </div>
    <!-- Attitude de la compétence attendu -->
    <div class="col-sm-12">
        <div class="form-group">
            <label class="control-label"> Attitude attendue de la compétence: </label>
            <InputTextArea row="5" class="form-control" placeholder="Attitude attendue de la compétence" @bind-Value="@(skill.AttitudeAttendu)" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => skill.AttitudeAttendu)" class="text-danger" />
            </div>
        </div>
    </div>
    <!-- Nombre de parties pour compléter la compétence -->
    <div class="col-sm-6">
        <div class="form-group">
            <label class="control-label"> Nombre de parties: </label>
            <InputNumber class="form-control" placeholder="##" @bind-Value="@(skill.NombreParties)" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => skill.NombreParties)" class="text-danger" />
            </div>
        </div>
    </div>
    <!-- Compétence étant complémentaire ou non -->
    <div class="col-sm-6">
        <label class="control-label"> Optionnelle: </label>
        <div class="form-group">
            <div class="custom-control custom-checkbox">
                <InputCheckbox id="CompetenceComplementaire" class="custom-control-input" @bind-Value="@(skill.CompetenceComplementaire)" />
                <label class="custom-control-label" for="CompetenceComplementaire">
                    Cocher si la compétence est complémentaire
                </label>
            </div>
        </div>
    </div>

    <div class="col-sm-2">
        <!-- appelle fonction javascript permettant d'ajouter le .wasvalidated sur la division du formulaire -->
        <!-- suite au poste validate nous envoyons l'utilisateur vers la deuxième partie celle de remplire les contextes et les éléments de compétence-->
        <button onclick="validationFor('#competenceForm');" type="submit" class="btn btn-primary">Suivant</button>
    </div>
</EditForm>
@code {
    [Parameter]
    public int departementId { get; set; } // paramètre du département pour lequel la compétence sera créé
    [Parameter]
    public string competenceId { get; set; } // id de la compétence créant une clée avec l'association du département
    [CascadingParameter] // donne a tous enfants le demandant le a valeur bindé
    protected PCU001Context context { get; set; }
    [CascadingParameter]
    protected Competences skill { get; set; }
    [CascadingParameter]
    protected List<Departements> departements { get; set; }
    [CascadingParameter]
    protected bool isEditing { get; set; } // valeur indiquant que la compétence existe et que tous les changements se font pour faire des updates

    // context d'édition pour le formulaire
    [Bindable]
    [Parameter]
    public EditContext CompetenceForm { get; set; }

    // settings on new step trigger
    [Parameter]
    public EventCallback NextStepTrigger { get; set; }

    
    private string StatusMessage; // update ui pour afficher des erreurs
    private bool isDuplicate; // vérifie si c'est un duplicate pour le différent message


    Competences duplicate;
    public async void HandleValidCompetence() // post validation
    {
        //skElements.ForEach(e => { e.CompetenceId = skill.CompetenceId; e.ElementCompetenceSqnbr = (byte)(skElements.IndexOf(e) + 1); });
        //skill.ElementsCompetence = skElements;
        //cntxt.CompetenceId = skill.CompetenceId;
        //skill.CompetenceContextes.Add(cntxt);
        if (isEditing && CompetenceForm.Validate())
        {
            // ef doit être updaté.
            SaveChanges();
            await NextStepTrigger.InvokeAsync(EventArgs.Empty);
        }
        else if ((duplicate = context.Competences
                    .Include(e => e.CompetenceContextes)
                    .First(d => d.CompetenceId == competenceId
                    && d.DisciplineId == departementId)) != null)
        {
            isDuplicate = true;
            StatusMessage = string.Format("La compétence {0} existe déjà pour le département {1}, vous pouvez vous diriger vers pour continuer sa modification", duplicate.CompetenceId, duplicate.Discipline.Titre);
            skill.CompetenceId = "";
            // trigger la validation afin de pouvoir afficher l'erreur
            CompetenceForm.Validate();
            StateHasChanged();
        }
        else
        {
            try
            {
                // ajoute la nouvelle compétence
                context.Competences.Add(skill);
                SaveChanges();
                await NextStepTrigger.InvokeAsync(EventArgs.Empty); // next step ready
            }
            catch (Exception e)
            {
                Console.WriteLine($"Error: {e.Message} -- {e.InnerException}");
            }
        }
    }

    void SaveChanges()
    {
        try
        {
            Console.WriteLine($"SQL return code: {context.SaveChanges()}");
        }
        catch (Exception e)
        {            
            isDuplicate = false;
            Console.WriteLine($"Error: {e.Message} -- {e.InnerException}");
            StatusMessage = "Une erreur est survenue, si cela persiste veuillez contacter votre administrateur.";
            StateHasChanged();
        }
    }
}