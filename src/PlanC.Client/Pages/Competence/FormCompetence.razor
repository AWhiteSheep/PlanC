@using Newtonsoft.Json
@page "/departements/{departementId:int}/competences/creation"
@page "/departements/{departementId:int}/competences/create"
@page "/departements/{departementId:int}/competences/{competenceId}/create"
@attribute [Authorize]
@layout MultiFormLayout
@inherits FormCompetenceBase
<!-- Section de navigation -->
<div class="row mb-3">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <!-- Donne accès au portail selon le role de l'utilisateur -->
                <li class="breadcrumb-item"><a href="/"> Portail </a></li>
                <li style="padding: 0 4px;"><i class="fas fa-home" style="font-size: 15px; color: #3f51b5;"></i></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item"><a href="/Departement"> Département </a></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item"><a href="/Departement/@departementId"> @departement.Titre </a></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item"><a href="/Departement/@departementId/Competence"> Compétences </a></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item active" aria-current="page"> Nouvelle compétence </li>
            </ol>
        </nav>
    </div>
</div>


<!-- Formulaire d'un nouveau plan-cadre -->
<div class="container shadow p-5">
    <div class="text-danger col-12" style="display:flex; flex-wrap: wrap;">
        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert alert-danger" style="width:100%; display: block !important">
                @StatusMessage
            </div>
        }
    </div>
    <div class="row">
        <div class="col-12 d-flex justify-content-center">
            <PlanC.Client.Components.ProgressBar steps="@(new List<string>{ "Choix département", "Description", "Réalisation", "Éléments", "Révision" })"
                                                 Current="CurrentStep"></PlanC.Client.Components.ProgressBar>
        </div>
        <!-- Valeur pour le titre du plan-cadre -->
        <div class="col-12 pt-5">
            <h4>@departement.Titre</h4>
        </div>
    </div>
    @*Envoit le paramètre à tous les enfants*@
    <CascadingValue TValue="PCU001Context" Value="context">
        <CascadingValue TValue="Competences" Value="skill">
            <CascadingValue TValue="List<Departements>" Value="departements">
                <CascadingValue TValue="bool" Value="isEditing">
                    @switch (CurrentStep)
                    {
                        case 1:
                            <!-- STEP 1: Création de toute information de base-->
                            <EditFormCompetence @ref="formCompetence" departementId="@departementId" competenceId="@competenceId"
                                                CompetenceForm="CompetenceForm"></EditFormCompetence>
                            break;
                        case 2:
                            <!--  STEP 2:  Ajout de contextes de  réalisations -->
                            <EditFormContextRealisation @ref="formRealisation"></EditFormContextRealisation>
                            break;
                        case 3:
                            <!-- STEP 3: Ajout des éléments de compétences -->
                            <EditFormElement @ref="formElement"></EditFormElement>
                            break;
                        case 4:
                            <!-- Confirmation, overview et empreinte de la date -->
                            <FormCompetenceReview></FormCompetenceReview>
                            break;
                    }
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>

    <div class="row">
        @switch (CurrentStep)
        {
            case 1:
                <div class="col-12 d-flex justify-content-end">
                    <button @onclick="StepNext" class="btn btn-primary">Suivant</button>
                </div>
                break;
            case 4:
                <div class="col-12 d-flex justify-content-end">
                    <button @onclick="FinirAsync" class="btn btn-primary">Terminer</button>
                </div>
                break;
            default:
                <div class="col-12 d-flex justify-content-between">
                    <!-- appelle fonction javascript permettant d'ajouter le .wasvalidated sur la division du formulaire -->
                    <!-- suite au poste validate nous envoyons l'utilisateur vers la deuxième partie celle de remplire les contextes et les éléments de compétence-->
                    <button @onclick="StepBackward" class="btn btn-primary">Précédent</button>
                    <button @onclick="StepNext" class="btn btn-primary">Suivant</button>
                </div>
                break;
        }
    </div>
</div>

@code {

    public PlanC.Client.Pages.Competence.EditFormCompetence formCompetence;
    public PlanC.Client.Pages.Competence.EditFormContextRealisation formRealisation;
    public PlanC.Client.Pages.Competence.EditFormElement formElement;

    public void StepNext()
    {
        switch (CurrentStep)
        {
            case 1:
                if (formCompetence.HandleValidCompetence())
                {
                    CurrentStep++;
                    isEditing = true;
                }
                break;
            case 2:
                if (formRealisation.HandleValidContext())
                {
                    CurrentStep++;
                }
                break;
            case 3:
                if (formElement.SubmitElements())
                {
                    CurrentStep++;
                }
                break;
            default:
                break;
        }
        StateHasChanged();
    }

    public void StepBackward()
    {
        switch (CurrentStep)
        {
            case 2:
                if (formRealisation.HandleValidContext())
                {
                    CurrentStep--;
                }
                break;
            case 3:
                if (formElement.SubmitElements())
                {
                    CurrentStep--;
                }
                break;
            default:
                break;
        }
        StateHasChanged();
    }

    public async void FinirAsync()
    {
        await JSRuntime.InvokeAsync<string>("showModal", "#competenceCreated");
    }
}
