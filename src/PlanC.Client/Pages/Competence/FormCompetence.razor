@using Newtonsoft.Json
@page "/departement/{departementId:int}/competence/create"
@page "/departement/{departementId:int}/competence/{competenceId}/create"
@layout MultiFormLayout
@inherits FormCompetenceBase

<!-- Section de navigation -->
<div class="row mb-3">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <!-- Donne accès au portail selon le role de l'utilisateur -->
                <li class="breadcrumb-item"><a href="/"> Portail </a></li>
                <li style="padding: 0 4px;"><i class="fas fa-home" style="font-size: 15px; color: #3f51b5;"></i></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item"><a href="/Departement"> Département </a></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item"><a href="/Departement/@departementId"> @departement.Titre </a></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item"><a href="/Departement/@departementId/Competence"> Compétences </a></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item active" aria-current="page"> Nouvelle compétence </li>
            </ol>
        </nav>
    </div>
</div>


<!-- Formulaire d'un nouveau plan-cadre -->
<div class="container shadow p-5">
    <div class="row">
        <!-- Valeur pour le titre du plan-cadre -->
        <div class="col-12">
            <h3>Département: @departement.Titre</h3>
        </div>
    </div>
    @*Envoit le paramètre à tous les enfants*@
    <CascadingValue TValue="PCU001Context" Value="context">
        <CascadingValue TValue="Competences" Value="skill">
            <CascadingValue TValue="List<Departements>" Value="departements">
                <CascadingValue TValue="bool" Value="isEditing">
                    @switch (CurrentStep)
                    {
                        @case 1:
                        <!-- STEP 1: Création de toute information de base-->
                        <EditFormCompetence departementId="@departementId" competenceId="@competenceId"
                                            CompetenceForm="CompetenceForm"></EditFormCompetence>
                        break;
                    case 2:
                        <!--  STEP 2:  Ajout de contextes de  réalisations -->
                        <EditFormContextRealisation></EditFormContextRealisation>
                        break;
                    case 3:
                        <!-- STEP 3: Ajout des éléments de compétences -->
                        <EditFormElement></EditFormElement>
                        break;
                    case 4:
                        <!-- Confirmation, overview et empreinte de la date -->
                        <FormCompetenceReview></FormCompetenceReview>
                        break;
                }
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>

    <div class="row">
        <div class="col-12 d-flex justify-content-between">
            <!-- appelle fonction javascript permettant d'ajouter le .wasvalidated sur la division du formulaire -->
            <!-- suite au poste validate nous envoyons l'utilisateur vers la deuxième partie celle de remplire les contextes et les éléments de compétence-->
            <button @onclick="StepBackward" class="btn btn-primary">Précédent</button>
            <button @onclick="StepNext" class="btn btn-primary">Suivant</button>
        </div>
    </div>
</div>

@code {
    public async void StepNext()
    {
        if (CurrentStep >= 4)
        {
            return;
        }
        else if (CurrentStep == 1)
        {
            await JSRuntime.InvokeAsync<string>("validationFor", "#competenceForm");
        }
        CurrentStep++;
        StateHasChanged();
    }

    public void StepBackward()
    {
        if (CurrentStep <= 1)
        {
            // oops do nothing
            return;
        }
        CurrentStep--;
        StateHasChanged();
    }
}
