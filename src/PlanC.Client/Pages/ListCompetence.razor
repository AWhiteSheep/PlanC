@page "/competence/list"
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@inject PCU001Context context
@inject IJSRuntime JSRuntime
<!-- Section de navigation -->
<div class="row mb-3">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <!-- Donne accès au portail selon le role de l'utilisateur -->
                <li class="breadcrumb-item"><a href="/"> Portail </a></li>
                <li style="padding: 0 4px;"><i class="fas fa-home" style="font-size: 15px; color: #3f51b5;"></i></li>
                <li class="breadcrumb-item"><i class="fas fa-circle" style="font-size: 5px; vertical-align: middle; padding-right: 2px;"></i></li>
                <li class="breadcrumb-item active" aria-current="page"> Toutes les compétences </li>
            </ol>
        </nav>
    </div>
</div>

<div class="container shadow p-5">
    <div class="row">
        @if (competences != null)
        {
            @foreach (var competence in competences)
            {
                <div id="container-@competence.IdentityKey" class="col-sm-12 col-lg-6 p-2">
                    <div class="card">
                        <div class="card-header clickable d-flex justify-content-between" data-collapse-id="@competence.IdentityKey">
                            <h3 class="panel-title">@competence.CompetenceId</h3>
                            <button class="btn btn-primary press" data-expend-button="@competence.IdentityKey">Élargir</button>
                        </div>
                        <div class="collapse" id="@competence.IdentityKey">
                            <div class="card-body">
                                <CascadingValue TValue="Competences" Value="competence">
                                    <PlanC.Client.Pages.Competence.FormCompetenceReview></PlanC.Client.Pages.Competence.FormCompetenceReview>
                                </CascadingValue>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code{

    List<Competences> competences;

    protected override void OnInitialized()
    {
        competences = context.Competences.Include(d => d.Discipline).ToList();
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // render le script pour les collapsible
            JSRuntime.InvokeAsync<string>("LoadCollapse");
        }
    }
}