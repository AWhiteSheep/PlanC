@using Syncfusion.EJ2.Blazor.Schedule
@using Syncfusion.EJ2.Blazor.Calendars
@using Syncfusion.EJ2.Blazor.Buttons

@inherits HoraireBase
@inject IJSRuntime JSRuntime

<div>
    <label for="Username" class="control-label"> Numéro d'usagé: </label>
    <input placeholder="... .. ." value="@Utilisateur.UserName" class="form-control mb-3" disabled />
    <div class="d-flex flex-row">
        <Syncfusion.EJ2.Blazor.Buttons.EjsButton @onclick="() => Refresh()">Rafraîchir</Syncfusion.EJ2.Blazor.Buttons.EjsButton>
        <Syncfusion.EJ2.Blazor.Buttons.EjsButton @onclick="() => Modifier()">Modifier votre horaire</Syncfusion.EJ2.Blazor.Buttons.EjsButton>
        <Syncfusion.EJ2.Blazor.Buttons.EjsButton @onclick="() => Annuler()">Annuler</Syncfusion.EJ2.Blazor.Buttons.EjsButton>
    </div>
    <div class="d-flex flex-row">
        <EjsSchedule TValue="RecurrenceData" @ref="schedule" Height="580px" Width="@(IsMofying ? "60%" : "100%")">
            <ScheduleTimeScale SlotCount="1"></ScheduleTimeScale>
            <ScheduleViews>
                <ScheduleView Option="View.WorkWeek"></ScheduleView>
                <ScheduleView Option="View.Week"></ScheduleView>
                <ScheduleView Option="View.Month"></ScheduleView>
                <ScheduleView Option="View.Agenda"></ScheduleView>
            </ScheduleViews>
            <ScheduleEventSettings DataSource="@ListDayTimeSpans">
            </ScheduleEventSettings>
        </EjsSchedule>
        @if (IsMofying)
        {
            <div style="width:40%" class="ml-5">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Jour de la semaine</th>
                            <th>Début</th>
                            <th>Fin</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var dayInSchedule in ListDayTimeSpans.OrderBy(e => e.WeekdayNbr))
                        {
                            <tr>
                                <td>
                                    <select @bind="dayInSchedule.WeekdayNbr" class="form-control">
                                        <option value="1">Lundi</option>
                                        <option value="2">Mardi</option>
                                        <option value="3">Mercredi</option>
                                        <option value="4">Jeudi</option>
                                        <option value="5">Vendredi</option>
                                        <option value="6">Samedi</option>
                                        <option value="0">Dimanche</option>
                                    </select>
                                </td>
                                <td>
                                    <div style="border: 1px solid #b2b2b2">
                                        <EjsTimePicker Format="HH:mm" @bind-Value="dayInSchedule.StartTime" />
                                    </div>
                                </td>
                                <td>
                                    <div style="border: 1px solid #b2b2b2">
                                        <EjsTimePicker Format="HH:mm" @bind-Value="dayInSchedule.EndTime" />
                                    </div>
                                </td>
                                <td>
                                    <button class="btn text-danger" @onclick="() => RemoveFromHoraire(dayInSchedule)" type="button"><i class="fas fa-trash"></i></button>
                                    <button class="btn text-danger" @onclick="() => Sync(dayInSchedule)" type="button"><i class="fas fa-sync-alt"></i></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>
<hr />
<div class="row justify-content-center">
    <EditForm Model="dayModel" OnValidSubmit="AddDayModel"  class="col-sm-12 col-md-10 col-lg-6">
        <DataAnnotationsValidator />
        <label for="dateOfValidity" class="control-label pt-3"> Date en mise en vigueur: </label>
        <EjsDatePicker @bind-Value="dayModel.RcdCdttm"></EjsDatePicker>
        <label for="Username" class="control-label"> Jour de la semaine: </label>
        <InputSelect @bind-Value="dayModel.DayOfWeekString" class="form-control">
            <option value="1">Lundi</option>
            <option value="2">Mardi</option>
            <option value="3">Mercredi</option>
            <option value="4">Jeudi</option>
            <option value="5">Vendredi</option>
            <option value="6">Samedi</option>
            <option value="0">Dimanche</option>
        </InputSelect>
        <span class="text-danger">
            <ValidationMessage class="text-danger" For="(() => dayModel.DayOfWeekString)"></ValidationMessage>
        </span>
        <table class="table-light mt-3" style="margin: auto">
            <thead>
                <tr>
                    <th>Heure de début:</th>
                    <th>Heure de fin:</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <div style="border: 1px solid #b2b2b2">
                            <EjsTimePicker Format="HH:mm" @bind-Value="dayModel.StartTime" />
                        </div>
                    </td>
                    <td>
                        <div style="border: 1px solid #b2b2b2">
                            <EjsTimePicker Format="HH:mm" @bind-Value="dayModel.EndTime" />
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="col-12 text-right">
            <EjsButton CssClass="mt-3 text-right">Ajouter une nouvelle disponibilité</EjsButton>
        </div>
    </EditForm>
</div>

@code{
    public bool IsMofying;
    public RecurrenceData dayModel { get; set; } = new RecurrenceData();
    public int[] WorkingDays { get; set; } = { 1, 2, 3, 4, 5 };
    public void AddDayModel()
    {
        var recurrenceRule = RecurrenceData.GetRecurenceRule(dayModel.WeekdayNbr);
        // transfert poid sur le context et puis sauvegarde et refresh
        Utilisateur.DisponibilitesUtilisateur.Add(dayModel);
        dayModel = new RecurrenceData();
        SaveProgress();
        RefreshDisponibilities();
        StateHasChanged();
    }

    public void RemoveFromHoraire(RecurrenceData dayModel)
    {
        Utilisateur.DisponibilitesUtilisateur.Remove(dayModel);
        SaveProgress();
        RefreshDisponibilities();
        StateHasChanged();
    }

    public void Sync(RecurrenceData dayModel)
    {
        // transfert poid sur le context et puis supprime
        dayModel.RecurrenceRule = RecurrenceData.GetRecurenceRule(dayModel.WeekdayNbr);
        SaveProgress();
        RefreshDisponibilities();
        StateHasChanged();
    }

    public void Annuler()
    {
        IsMofying = false;
    }

    public void Modifier()
    {
        IsMofying = true;
    }

    public void Refresh()
    {
        schedule.Refresh();
    }
}