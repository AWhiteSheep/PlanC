@using PlanC.Client.Components
@inherits CourseTemplateFormComponent
@implements IDisposable
@using Syncfusion.EJ2.Blazor.RichTextEditor
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity;

<!-- Formulaire d'un nouveau plan-cadre -->
@if (!IsReadOnly)
{
    <PlanC.Client.Components.DropdownProgramSelection ForDepartement="ForDepartement" @ref="ProgramSelect"></PlanC.Client.Components.DropdownProgramSelection>
}
@if (CurrentMode == FormPlanCadre.FormMode.EDIT || CurrentMode == FormPlanCadre.FormMode.CREATE || IsReadOnly)
{
    <div class="row">
        <div class="col-12">
            <h3> Formulaire de plan-cadre: </h3>
        </div>
        <div hidden="@(!hasNoProgramme)" class="col-12">
            <div class="form-group">
                <!--lui donner la chance de cérer un programme pour le département-->
                <label class="control-label">Il n'y à pas de programme pour le département sélectionner.</label>
                <a href="/admin/programmes"> Ajouter une nouvelle référence de programme </a>
            </div>
        </div>
        <div class="col-12">
            <div class="form-group">
                <label class="control-label" for="CrsTitle"> Titre du du programme: </label>
                <input readonly type="text" class="form-control" value="@Program.ToString()" />
            </div>
        </div>
    </div>
    <EditForm EditContext="editContext">
        @*The Data annotations validator uses annotations on the properties of the specified EF model to perform validations*@
        <DataAnnotationsValidator />
        <div class="row">
            <!-- Valeur pour le titre du plan-cadre -->
            <div class="col-lg-6">
                <div class="form-group">
                    <label class="control-label" for="CrsTitle"> Nom du cours associé: </label>
                    <input readonly="@IsReadOnly" type="text" @bind="Template.DenominationCours" class="form-control" />
                </div>
            </div>
            <!-- Valeur pour l'identification du cours -->
            <div class="col-lg-6">
                <div class="form-group">
                    <label class="control-label" for="CrsId"> Identifiant du cours: </label>
                    <InputText readonly="@IsReadOnly" type="text" @bind-Value="Template.CoursId" class="form-control" />
                    <ValidationMessage For="(() => Template.CoursId)"></ValidationMessage>
                </div>
            </div>
        </div>
        <div class="row">
            <!-- Ajout de la pondération -->
            <div class="col-md-12">
                <div class="form-group">
                    <div class="row">
                        <div class="form-group col-12">
                            <table>
                                <thead>
                                    <tr><td></td><td class="p-0">Pondération du cours:</td></tr>
                                    <tr>
                                        <td width="50%" class="p-0">Nombre d'unités:</td>
                                        <th>Théorie</th>
                                        <th>Pratique</th>
                                        <th>Chez soi</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td class="no-left-padding">
                                            <ValidationMessage For="() => Template.UnitsAccessor"></ValidationMessage>
                                            <InputNumber readonly="@IsReadOnly" TValue="decimal" @bind-Value="Template.UnitsAccessor" class="form-control theme-mask input" id="Units" />
                                        </td>
                                        <!-- Nombre d'unités pour le cours donné -->
                                        <td class="no-left-padding">
                                            <InputNumber readonly="@IsReadOnly" class="theme-mask form-control" TValue="int" Mask="0" @bind-Value="Template.TheoryHoursAccessor" />
                                        </td>
                                        <td class="no-left-padding">
                                            <InputNumber readonly="@IsReadOnly" class="theme-mask form-control" TValue="int" Mask="0" @bind-Value="Template.PracticeHoursAccessor" />
                                        </td>
                                        <td class="no-left-padding pr-0">
                                            <InputNumber readonly="@IsReadOnly" class="theme-mask form-control" TValue="int" Mask="0" @bind-Value="Template.HomeHoursAccessor" />
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Séparateur -->
            <hr />
            <div class="col-12">
                <!-- Descriptions du cours -->
                <div class="form-group">
                    <label class="control-label" for="CrsDesc">Brève description du cours: </label>
                    <EjsRichTextEditor @ref="Description" Readonly="@IsReadOnly" ShowCharCount="true" MaxLength="450" Value="@(Template.Description)" />
                </div>
            </div>
            <div class="col-12">
                <!-- les intentions du cours -->
                <div class="form-group">
                    <label class="control-label" for="CrsIntent">Intentions éducatives: </label>
                    <EjsRichTextEditor @ref="Intention" Readonly="@IsReadOnly" ShowCharCount="true" MaxLength="450" Value="@(Template.IntentionEducative)" />
                </div>
            </div>
            <!-- Plus tard dans la section approbation-->
            <div class="row" style="display:contents">
                <div class="col-md-4">
                    <label class="label-info">Date d'approbation en département</label>
                    <input readonly="@IsReadOnly" type="date" @bind="Template.DateApprobationDepartement" class="form-control input" />
                </div>
                <div class="col-md-4">
                    <label class="label-info">Date d'approbation en comité</label>
                    <input readonly="@IsReadOnly" type="date" @bind="Template.DateApprobationCommite" class="form-control input" />
                </div>
                <div class="col-md-4">
                    <label class="label-info">Date d'approbation de la direction de études</label>
                    <input readonly="@IsReadOnly" type="date" @bind="Template.DateApprobationDepartement" class="form-control input" />
                </div>
            </div>
        </div>
    </EditForm>
}
@code {
    [CascadingParameter]
    // vérifie si 'utilisateur à les rôles dont il a besoin pour
    public Task<AuthenticationState> authenticationState { get; set; }
    [CascadingParameter]
    public ClaimsPrincipal user { get; set; }
    [Parameter]
    // fait en sorte que le template est editable
    public bool IsReadOnly { get; set; } = false;
    [Parameter]
    public Departements ForDepartement { get; set; }
    [Parameter]
    public bool hasRights { get; set; }
    [Parameter]
    public bool hasNoProgramme { get; set; } = false;

    public Programmes Program { get; set; }

    //Passed by the parent form with two-way binding so that changes made in this component propagate upwards.
    [Parameter]
    [Bindable]
    public PlansCadres Template { get; set; }

    //Required by blazor to handle two-way binding
    [Parameter]
    public EventCallback<PlansCadres> TemplateChanged { get; set; }

    //Passed down by the parent form
    [CascadingParameter]
    protected PCU001Context context { get; set; }

    //Passed down by the parent form. Determines data access behavior.
    [CascadingParameter]
    public FormPlanCadre.FormMode CurrentMode { get; set; }

    //Dropdown list populated with database program data.
    private DropdownProgramSelection ProgramSelect { get; set; }

    //Blazor component which implements validation using EF model data annotations.
    [Bindable]
    [Parameter]
    public EditContext editContext { get; set; }

    //affiche un rich textinput pour les intentions éducatives
    [Bindable]
    [Parameter]
    public EjsRichTextEditor Intention { get; set; }
    //affiche un rich textinput pour la brève description du cours
    [Bindable]
    [Parameter]
    public EjsRichTextEditor Description { get; set; }

    //les options pour les richtext
    public object[] Tools = new object[]{
        "Bold", "Italic", "Underline", "SubScript", "SuperScript", "StrikeThrough",
        "FontName", "FontSize", "FontColor", "BackgroundColor",
        "LowerCase", "UpperCase", "|",
        "Formats", "Alignments", "OrderedList", "UnorderedList",
        "Outdent", "Indent", "|", "CreateTable",
        "CreateLink", "Image", "|", "ClearFormat", "Print",
        "SourceCode", "FullScreen", "|", "Undo", "Redo"
    };
    //Callback given to the program selection dropdown box. Updates program property.
    private void UpdateProgram(object sender, Programmes arg)
    {
        Program = arg;
        StateHasChanged();
    }

    //Initializes the validator with the EF model.
    protected override void OnInitialized()
    {
        editContext = new EditContext(Template);
    }

    protected override void OnParametersSet()
    {
        using (PCU001Context _temp = new PCU001Context())
        {
            switch (CurrentMode)
            {
                case FormPlanCadre.FormMode.CREATE:
                    Program = _temp.Programmes.FirstOrDefault();
                    break;
                case FormPlanCadre.FormMode.EDIT:
                    Program = _temp.Programmes.SingleOrDefault(p => p.Id == Template.ProgrammeId);
                    break;
                default:
                    throw new Exception($"Error in {this}: CurrentMode is {CurrentMode}");
            }
        }
    }

    /// <summary>
    /// Adds method UpdateProgram to the dropdown program selection component's ValueChanged event.
    /// </summary>
    /// <param name="firstRender">Denotes whether this is the first time the component is rendered.</param>
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && !IsReadOnly)
        {
            ProgramSelect.ValueChanged += UpdateProgram;
        }
    }

    public void Dispose()
    {
        try
        {
            context.SaveChanges();
        }
        catch (Exception except)
        {
            Console.WriteLine($"Template input error: {except.Message}");
        }
    }


    /// <summary>
    /// Attempts to save current data into the database.
    /// </summary>
    /// <returns>True if changes were successfully saved to the database; false otherwise.</returns>
    public override bool SaveProgress()
    {
        if (editContext.Validate())
        {
            switch (CurrentMode)
            {
                case FormPlanCadre.FormMode.CREATE:
                    try
                    {
                        Template.ProgrammeId = Program.Id;
                        Template.VsnCdttm = DateTime.Now;
                        Template.IntentionEducative = Intention.Value;
                        Template.Description = Description.Value;
                        context.PlansCadres.Add(Template);

                        if (context.SaveChanges() > 0)
                        {
                            return true;
                        }
                        else return false;
                    }
                    catch (Exception except)
                    {
                        Console.WriteLine($"Template input error: {except.Message}");
                        return false;
                    }
                case FormPlanCadre.FormMode.EDIT:
                    try
                    {
                        Template.ProgrammeId = Program.Id;
                        Template.IntentionEducative = Intention.Value;
                        Template.Description = Description.Value;
                        context.PlansCadres.Update(Template);
                        if (context.SaveChanges() > 0)
                        {
                            StateHasChanged();
                            return true;
                        }
                        else return false;
                    }
                    catch (Exception except)
                    {
                        Console.WriteLine($"Template input error: {except.Message}");
                        return false;
                    }
                default:
                    context.SaveChanges();
                    throw new Exception($"Error in {this}: CurrentMode is {CurrentMode}");
            }

        }
        else
        {
            return false;
        }
    }


}
