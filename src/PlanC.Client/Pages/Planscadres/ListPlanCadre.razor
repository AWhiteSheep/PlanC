@page "/planscadres"
@inject PCU001Context context
@using System.Linq
@inject NavigationManager _NavigationManager
@inject IJSRuntime Js
@using Syncfusion.EJ2.Blazor.Navigations
@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.Buttons
@using WDocument = Syncfusion.EJ2.DocumentEditor;
@using PlanC.DocumentGeneration.CourseTemplate
@using PlanC.DocumentGeneration.Common
@using System.Collections.ObjectModel;
@using System.IO

<!--section sécurité doit être seulement coordonateur du programme et la consultation par le professeur-->
<!-- Section de navigation -->
<div class="row mb-3">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <!-- Donne accès au portail selon le role de l'utilisateur -->
                <li class="breadcrumb-item"><a href="/"> Portail </a></li>
                <li style="padding: 0 4px;"><i class="fas fa-home" style="font-size: 15px; color: #3f51b5;"></i></li>
                <li class="breadcrumb-item active" aria-current="page"> Visualisation des plans cadres </li>
            </ol>
        </nav>
    </div>
</div>

<div class="container shadow p-5">
    <div class="row">
        <div class="col-12">
            <h3>Liste des plans cadres:</h3>
        </div>
        <div class="col-12">
            <EjsButton @onclick="Supprimer" Disabled="(Selected == null)"> Supprimer la sélection </EjsButton>
            <a href="/planscadres/creation">Nouveau plancadre</a>
            <br />
            @if (TemplateCours != null)
            {
                <EjsGrid DataSource="@TemplateCours" AllowSorting="true" AllowPaging="true"
                         ContextMenuItems="@(new List<ContextMenuItemModel>() {
                                                 new ContextMenuItemModel { Text = "Ouvrir plan de cadre", Target = ".e-content", Id = "open" },
                                                 new ContextMenuItemModel { Text = "Sauvegarder en tant que word", Target = ".e-content", Id = "word" }
                                             })">
                    <GridEditSettings AllowAdding="true" AllowDeleting="true"></GridEditSettings>
                    <GridPageSettings PageSize="8"></GridPageSettings>
                    <!-- Les événements se passant sur la table et les paramètre -->
                    <GridEvents ContextMenuItemClicked="OnContextMenuClick" RowSelected="RowSelectHandler" RowDeselected="() => Selected = null" TValue="PlansCadres"></GridEvents>
                    <GridColumns>
                        <GridColumn IsPrimaryKey="true" Field=@nameof(PlansCadres.CoursId) HeaderText="Identifiant du cours"></GridColumn>
                        <GridColumn Field=@nameof(PlansCadres.ProgrammeId) HeaderText="Identifiant du programme"></GridColumn>
                        <GridColumn Field=@nameof(PlansCadres.DenominationCours) HeaderText="Nom du cours"></GridColumn>
                        <GridColumn Field=@nameof(PlansCadres.RcdCdttmString) HeaderText="Dernier enregistrement"></GridColumn>
                        <GridColumn Field=@nameof(PlansCadres.DptDateString) HeaderText="Approbation departement"></GridColumn>
                        <GridColumn Field=@nameof(PlansCadres.DirectorDateString) HeaderText="Approbation direction"></GridColumn>
                        <GridColumn Field=@nameof(PlansCadres.CmteDateString) HeaderText="Approbation commité"></GridColumn>
                    </GridColumns>
                </EjsGrid>
            }
            else if (loadFailed)
            {
                <a href="" class="reload">Recharger la page</a>
            }
            else
            {
                <h1>En chargement...</h1>
            }
        </div>
    </div>
</div>
<div class="col-12 text-center">
    <span class="smallerFontSize">La page ne répond pas? <a href="/planscadres" onclick="window.location.reload()" class="reload">Rafraîchir la page.</a></span>
</div>
@code{
    public List<PlansCadres> TemplateCours { get; set; }
    public PlansCadres Selected { get; set; }
    private bool loadFailed; //safe check si la list à eu une erreur pour demander à l'usager de reload

    protected override void OnInitialized()
    {
        // initialisation de la liste
        try
        {
            loadFailed = false;
            TemplateCours = context.PlansCadres.ToList();
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Console.WriteLine("Failed to load {context}, {ex}", context, ex);
        }
    }

    protected void Supprimer()
    {
        TemplateCours.Remove(Selected);
        context.PlansCadres.Remove(Selected);
        SaveProgress();
    }

    public void SaveProgress()
    {
        try
        {
            context.SaveChanges();
            TemplateCours = context.PlansCadres.ToList();
            StateHasChanged();
        }
        catch (Exception except)
        {
            Console.WriteLine($"Plan cadre liste error: {except.Message}");
        }
    }

    public void RowSelectHandler(RowSelectEventArgs<PlansCadres> args)
    {
        Selected = TemplateCours.FirstOrDefault(e => e.CoursId == args.Data.CoursId);
    }

    public void OnContextMenuClick(MenuEventArgs args)
    {
        if (args.Item.Id == "open")
        {
            _NavigationManager.NavigateTo($"/plancadre/{Selected.CoursId}/create");
        }
        else if (args.Item.Id == "word")
        {
            byte[] dataInByte = FileUtil.FromTemplate(Selected, context);
            Js.SaveAs("Planscadre" + DateTime.Now.ToString() + ".docx", dataInByte);
        }
    }
}
