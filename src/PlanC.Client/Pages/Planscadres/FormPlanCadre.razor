@page "/plancadre/create"
@page "/plancadre/{id}/create"

@using PlanC.EntityDataModel
@using Components;
@inject NavigationManager NavigationManager
@inject PCU001Context context
@attribute [Authorize("AuthorizationNemesisGroupPolicy")]
<!-- Section de navigation -->
<div class="row mb-3">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <!-- Donne accès au portail selon le role de l'utilisateur -->
                <li class="breadcrumb-item"><a href="/"> Portail </a></li>
                <li style="padding: 0 4px;"><i class="fas fa-home" style="font-size: 15px; color: #3f51b5;"></i></li>
                <li class="breadcrumb-item active" aria-current="page"> Nouveau plan cadre </li>
            </ol>
        </nav>
    </div>
</div>

<div class="container shadow p-5">
    @*Envoit le paramètre à tous les enfants*@
    <CascadingValue TValue="PCU001Context" Value="context">
        <PlanC.Client.Components.DropdownProgramSelection @ref="ProgramSelect"></PlanC.Client.Components.DropdownProgramSelection>


        @if (programme != null)
        {
            <EditFormPlancadre Program="programme"></EditFormPlancadre>
        }

    </CascadingValue>
</div>


@code{
    [Parameter]
    public string Id { get; set; }
    public string programmeId { get; set; }
    public Programmes programme { get; set; }
    private EditFormPlancadre TemplateForm { get; set; }

    DropdownProgramSelection ProgramSelect;

    ChangeEventArgs<DropdownProgramSelection> programSelectChange;

    protected override void OnAfterRender(bool first)
    {
        if (first)
            ProgramSelect.ValueChanged += UpdateProgram;
    }

    private void UpdateProgram(object sender, Programmes arg)
    {
        programme = arg;
        StateHasChanged();
    }
}
