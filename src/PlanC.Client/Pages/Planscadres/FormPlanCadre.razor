@page "/plancadre/create"
@page "/planscadres/creation"
@page "/plancadre/{id}/create"
@page "/planscadres/{id}/create"
@page "/planscadres/{id}/edition/{VsnCdttm}/modifier"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject PCU001Context context
@inject IJSRuntime JS
@using System.IO
@using PlanC.Client.Data
@using Newtonsoft.Json
@using PlanC.EntityDataModel
@using PlanC.Client.Components
@using System.Collections.Generic
@using PlanC.DocumentGeneration.CourseTemplate
@using PlanC.DocumentGeneration.Common
@using Microsoft.EntityFrameworkCore
@using Syncfusion.EJ2.Blazor.RichTextEditor
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.DocumentEditor
@using Syncfusion.EJ2.DocumentEditor.Blazor
@using WDocument = Syncfusion.EJ2.DocumentEditor;
@using System.Collections.ObjectModel;

<!--section sécurité doit être seulement coordonateur du programme et la consultation par le professeur-->
<!-- Section de navigation -->
<div class="row mb-3">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <!-- Donne accès au portail selon le role de l'utilisateur -->
                <li class="breadcrumb-item"><a href="/"> Portail </a></li>
                <li style="padding: 0 4px;"><i class="fas fa-home" style="font-size: 15px; color: #3f51b5;"></i></li>
                <li class="breadcrumb-item active" aria-current="page"> Nouveau plan cadre </li>
            </ol>
        </nav>
    </div>
</div>



<div class="row">
    <div class="col-12 d-flex justify-content-center">
        <PlanC.Client.Components.ProgressBar steps="@(new List<string>{ "Déscription", "Compétences", "Examens finaux", "Révision" })" Current="CurrentStep"></PlanC.Client.Components.ProgressBar>
    </div>
</div>

<div hidden="@(EditorOpen)" class="container shadow p-5" style="margin-bottom: 200px; margin-top: 50px">
    @*Envoit le paramètre à tous les enfants*@
    <CascadingValue TValue="PCU001Context" Value="context">
        <CascadingValue TValue="FormMode" Value="CurrentMode">
            @if (CurrentForm is EditFormPlancadre)
            {
                <EditFormPlancadre @bind-Template="Template" @ref="CurrentForm"></EditFormPlancadre>
            }
            else if (CurrentForm is TemplateSkillElemInput)
            {
                <PlanC.Client.Components.TemplateSkillElemInput @bind-Template="Template" @ref="CurrentForm"></PlanC.Client.Components.TemplateSkillElemInput>
            }
            else if (CurrentForm is FinalExamInput)
            {
                <PlanC.Client.Components.FinalExamInput @bind-Template="Template" @ref="CurrentForm"></PlanC.Client.Components.FinalExamInput>
            }
            else if (CurrentForm is TemplateReview)
            {
                <PlanC.Client.Components.TemplateReview Template="Template" @ref="CurrentForm"></PlanC.Client.Components.TemplateReview>
            }
        </CascadingValue>
    </CascadingValue>
    <div class="container mt-3">
        <div class="row">
            <div class="col-12 d-flex justify-content-around">
                <!-- appelle fonction javascript permettant d'ajouter le .wasvalidated sur la division du formulaire -->
                <!-- suite au poste validate nous envoyons l'utilisateur vers la deuxième partie celle de remplire les contextes et les éléments de compétence-->
                <button @onclick="NavigatePrevious" disabled="@(CurrentNode.Previous == null)" class="btn btn-primary">Précédent</button>
                <button @onclick="NavigateNext" hidden="@(CurrentNode.Next == null)" disabled="@(CurrentNode.Next == null)" class="btn btn-primary">Suivant</button>
                <a @onclick="Finish" hidden="@(CurrentNode.Next != null)" disabled="@(CurrentNode.Next != null)" class="btn btn-primary text-white">Terminer</a>
            </div>
        </div>
    </div>
    <div class="col-12 text-center mt-3">
        @if (string.IsNullOrEmpty(Id))
        {
            <span class="smallerFontSize">La page ne répond pas? <a href="/planscadres/creation" onclick="window.location.reload()" class="reload">Rafraîchir la page.</a></span>
        }
        else
        {
            <span class="smallerFontSize">La page ne répond pas? <a href="/planscadres/@Id/create" onclick="window.location.reload()" class="reload">Rafraîchir la page.</a></span>
        }
    </div>
</div>


<div hidden="@(!EditorOpen)" class="container shadow p-5 w-100 h-100" style="margin-bottom: 200px; margin-top: 50px">
    <EjsButton @onclick="() => EditorOpen = false">Fermer</EjsButton>
    <EjsButton @onclick="OnDownload">Télécharger</EjsButton>
    <EjsDocumentEditorContainer @ref="container">
    </EjsDocumentEditorContainer>
</div>

<div hidden="@(CurrentNode.Next != null)" disabled="@(CurrentNode.Next != null)" class="col-12 d-flex justify-content-center m-3">
    <!-- Click pour faire -->
    <a @onclick="Export" class="btn btn-outline-primary">Gérérer le plan-cadre</a>
</div>

@code {
    // document editor ref point
    EjsDocumentEditorContainer container;
    bool EditorOpen { get; set; }

    [Parameter]
    public string Id { get; set; }
    // date pour la recherche du plan-cadre
    [Parameter]
    public DateTime VsnCdttm { get; set; }

    [CascadingParameter]
    public FormMode CurrentMode { get; set; }

    public CourseTemplateFormComponent CurrentForm { get; set; }

    private LinkedListNode<CourseTemplateFormComponent> CurrentNode { get; set; }
    private LinkedList<CourseTemplateFormComponent> Forms { get; set; }


    // sauvegarde des remarque laissé dans le formulaire template review
    public EjsRichTextEditor Remarque { get; set; }

    [Parameter]
    public PlansCadres Template { get; set; }

    private int CurrentStep = 0;

    ChangeEventArgs<PlanC.Client.Components.DropdownProgramSelection> programSelectChange;

    public void Export()
    {
        // génère le document
        EditorOpen = true;
        Download();
    }

    public void Download()
    {
        List<PlanCadreCompetenceElements> tempTemplateElements =null;
        if(Template != null)
            tempTemplateElements = context.PlanCadreCompetenceElements.Include(e => e.ElementCompetence)
                .ThenInclude(d => d.IdentityKeyCompetencesNavigation)
                .Include(v => v.PlansCadres)
                .Where(t => t.CoursId.Trim() == Template.CoursId.Trim()).ToList();

        if (tempTemplateElements == null)
            return;
        // First sKILL has competence
        System.Collections.ObjectModel.Collection<Skill> Skills = new System.Collections.ObjectModel.Collection<Skill>();
        // tous les compétences reliés avec le plancadre
        List<Competences> competences = new List<Competences>();

        /// FAIRE LA SKILL LISTE
        ///
        // cycle sur les critere element competence
        foreach (var elementsCompetenceTemplate in tempTemplateElements)
        {
            Competences comp = elementsCompetenceTemplate.ElementCompetence.IdentityKeyCompetencesNavigation;
            // composant d'une compétence
            if (!competences.Contains(comp))
            {
                competences.Add(comp);
                Skills.Add(new Skill() { Title = competences.Last().Enonce });
            }

            // trouve le skill et ajoute à celui ci le skill element trouvé
            var _skill = Skills.First(e => e.Title == comp.Enonce);

            if (_skill == null)
            {
                Console.WriteLine($"Didn't not find {comp.Enonce}");
            }
            else
            {
                // ajoute au skill trouvé l'élément dans la compétence relié dans laquelle nous nous trouvons
                _skill.SkillElements.Add(new SkillElement()
                {
                    Title = elementsCompetenceTemplate.LongDescription,
                    Criterias = new System.Collections.ObjectModel.Collection<string>(elementsCompetenceTemplate.ElementCompetence.GetCritereListString)
                });

                // acquired all context has string
                _skill.AchievementContexts = new System.Collections.ObjectModel.Collection<string>(comp.GetContextListString);
            }
        }

        CourseTemplate template = new CourseTemplate()
        {            
            CourseId = Template.CoursId,
            CourseDescription = Template.Description,
            CourseTitle = Template.DenominationCours,
            EducativeIntent = Template.IntentionEducative,
            PedagogicalIntent = Template.IntentionPedagogique,
            TimeDistribution = new TimeDistribution(Template.TheoryHoursAccessor, Template.PracticeHoursAccessor, Template.HomeHoursAccessor),
            UnitsCount = Template.UnitsAccessor,
            Skills = Skills,            
        };

        using (var stream = new MemoryStream())
        {
            using (var document = PlanC.DocumentGeneration.CourseTemplate.DocumentFactory.Create(stream))
            {
                var editor = new DocumentEditor(document);
                editor.Model = template;
                editor.ApplyChanges();
            }
            Open(stream);
        }
    }
    string sfdtString;
    public void Open(MemoryStream stream)
    {
        WDocument.WordDocument document = WDocument.WordDocument.Load(stream, WDocument.FormatType.Docx);
        sfdtString = JsonConvert.SerializeObject(document);
        document.Dispose();
        if (!String.IsNullOrEmpty(sfdtString))
        {
            DocumentEditorModule editor = container.GetDocumentEditor();
            editor.Open(sfdtString);
        }

    }

    public void OnDownload()
    {
        //envoit un document à la sauvegarde
        DocumentEditorModule editor = container.GetDocumentEditor();
        editor.Save("Plancadres"+Template.CoursId, FormatType.Docx);
    }

    protected override void OnInitialized()
    {
        //Si la page reçoit un ID spécifique, ce processus le charge en mémoire. Sinon, il génère un nouvel objet.
        PlansCadres SpecifiedTemplate = context.PlansCadres.Include(tmp => tmp.PlanCadreCompetenceElements)
                                                            .Include(tmp => tmp.ExamensFinalsCertificatifs)
                                                            .Where(cadre => cadre.CoursId.Trim() == this.Id)
                                                            .OrderByDescending(cadre => cadre.VsnCdttm)
                                                            .FirstOrDefault();


        if (SpecifiedTemplate != null)
        {
            Template = SpecifiedTemplate;
            CurrentMode = FormMode.EDIT;
        }
        else
        {
            Template = new PlansCadres();
            CurrentMode = FormMode.CREATE;
        }


        //Création des composantes du wizard et ajout à la liste liée.
        Forms = new LinkedList<CourseTemplateFormComponent>();

        Forms.AddLast(new EditFormPlancadre());
        Forms.AddLast(new TemplateSkillElemInput());
        Forms.AddLast(new FinalExamInput());
        Forms.AddLast(new TemplateReview());

        CurrentNode = Forms.First;
        CurrentForm = CurrentNode.Value;
        StateHasChanged();
    }

    private void NavigateNext()
    {
        if (CurrentForm.SaveProgress())
        {
            CurrentNode = CurrentNode.Next;
            CurrentForm = CurrentNode.Value;
            CurrentMode = FormMode.EDIT;
            CurrentStep++;
            StateHasChanged();
        }
        else
        {
            return;
        }
    }
    private void NavigatePrevious()
    {
        CurrentNode = CurrentNode.Previous;
        CurrentForm = CurrentNode.Value;
        CurrentStep--;
        StateHasChanged();
    }

    public enum FormMode
    {
        CREATE = 1,
        EDIT = 2
    }


    public void Finish()
    {
        //sauvegarde de la remarque laissé par le coordinateur
        Template.IntentionPedagogique = (CurrentForm as TemplateReview).Remarque.Value;
        context.SaveChanges();
        NavigationManager.NavigateTo($"/planscadres/{Template.CoursId}/confirmation");
    }

}
