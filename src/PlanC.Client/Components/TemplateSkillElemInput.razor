@using PlanC.EntityDataModel
@using Pages.Planscadres
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.Lists
@using Syncfusion.EJ2.Blazor.Grids
@inject PCU001Context _context
@inject IJSRuntime JSRuntime
@inherits CourseTemplateFormComponent

<EjsComboBox @ref="SkillDropdown" TValue="@Competences" DataSource="AvailableSkills">
    <ComboBoxEvents TValue="int" ValueChange="onValueChanged"></ComboBoxEvents>
    <ComboBoxFieldSettings Value="IdentityKey" Text="Enonce"></ComboBoxFieldSettings>
</EjsComboBox>
<EjsButton CssClass="btn btn-info" @onclick="AddSkill">Ajouter</EjsButton>



@foreach(Competences comp in SelectedSkills)
{
    <div>@comp.ToString()</div>

    foreach(ElementsCompetence elem in comp.ElementsCompetence)
    {
        <div>@elem.Libele</div>
    }
}




@code {

    [Parameter]
    public PlansCadres Template { get; set; }

    [Parameter]
    public EventCallback<PlansCadres> TemplateChanged { get; set; }

    [CascadingParameter]
    public PCU001Context context { get; set; }

    private Programmes Program;

    Competences CurrentSelection { get; set; }

    private List<Competences> AvailableSkills { get; set; }

    private List<Competences> SelectedSkills { get; set; }

    private EjsComboBox<Competences> SkillDropdown { get; set; }

    public List<CoursElementsCompetences> SelectedSkillElements { get; private set; }

    protected override void OnInitialized()
    {
        SelectedSkills = new List<Competences>();
        SelectedSkillElements = new List<CoursElementsCompetences>();
        Program = context.Programmes.SingleOrDefault(prog => Template.ProgrammeId == prog.Id);
    }

    protected override void OnParametersSet()
    {
        RefreshSkills();
    }


    protected override void OnAfterRender(bool firstRender)
    {
        JSRuntime.Ejs().SetCulture("fr-CA");
    }

    protected void RefreshSkills()
    {

        AvailableSkills = _context.Competences.Where(c => c.DisciplineId == Program.DepartementId)
                                                .ToList();

        AvailableSkills.RemoveAll(available => SelectedSkills.Contains(available));

        List<ElementsCompetence> AssociatedSkillElems = _context.ElementsCompetence.Where(ec => AvailableSkills.Contains(ec.IdentityKeyCompetencesNavigation)).ToList();

        foreach (ElementsCompetence sklelem in AssociatedSkillElems)
        {
            SelectedSkillElements.Add(new CoursElementsCompetences
            {
                CoursId = Template.CoursId,
                CompetenceId = sklelem.IdentityKeyCompetencesNavigation.CompetenceId,
                ElementCompetenceQnbr = (Int16)sklelem.ElementCompetenceSqnbr,
                VsnCdttm = Template.VsnCdttm,
                DisciplineId = sklelem.IdentityKeyCompetencesNavigation.DisciplineId,
                TrkUid = "rtadmin"
            });
        }

        StateHasChanged();
    }

    protected void AddSkill(MouseEventArgs args)
    {

        SelectedSkills.Add(CurrentSelection);

        RefreshSkills();
    }

    public override bool SaveProgress()
    {
        _context.AddRange(SelectedSkillElements);

        try
        {
            int result =  _context.SaveChanges();
            if (result > 0)
            {
                return true;
            }
            else return false;
        }
        catch (Exception except)
        {
            Console.WriteLine($"Template Skill Elem input error: {except.Message} -- {except.InnerException.Message}");
            return false;
        }
    }

    private void onValueChanged(ChangeEventArgs<int> args)
    {
        Competences target = context.Competences.SingleOrDefault(c => c.IdentityKey == args.Value);
        CurrentSelection = target;
    }
}