@using PlanC.EntityDataModel
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.Lists
@using Syncfusion.EJ2.Blazor.Grids
@inject PCU001Context _context
@inject IJSRuntime JSRuntime
@inherits CourseTemplateFormComponent

<EjsGrid DataSource="@ExamInput">
    <GridColumns>
        <GridColumn Field="@nameof(Examens.Qualification)" HeaderText="Qualification/Titre"></GridColumn>
        <GridColumn Field="@nameof(Examens.PoidExamen)" HeaderText="Pondération"></GridColumn>
    </GridColumns>
</EjsGrid>


@code {
    [Parameter]
    public PlansCadres Template { get; set; }

    [Parameter]
    public EventCallback<PlansCadres> TemplateChanged { get; set; }

    [CascadingParameter]
    public PCU001Context context { get; set; }

    public List<Examens> ExamInput { get; private set; }

    public List<ExamensFinalsCertificatifs> FinalExams { get; private set; }

    public List<ExamensElementsCompetences> ExamSkillElemInput { get; private set; }

    protected async Task<bool> NextStep()
    {
        foreach(Examens exam in ExamInput)
        {
            FinalExams.Add(new ExamensFinalsCertificatifs()
            {
                CoursId = Template.CoursId,
                VsnCdttm = Template.VsnCdttm,
                Examen = exam,
                PlansCadres = Template
            });
        }

        try
        {
            _context.Examens.AddRange(ExamInput);
            _context.ExamensFinalsCertificatifs.AddRange(FinalExams);

            int result = await _context.SaveChangesAsync();

            if (result > 0)
            {
                return true;
            }
            else return false;
        }
        catch (Microsoft.EntityFrameworkCore.DbUpdateException except)
        {
            Console.WriteLine($"{except.Message} \n --> {except.InnerException.Message}");
            return false;
        }
    }

    public override bool SaveProgress()
    {
        context.Examens.AddRange(ExamInput);

        try
        {
            int result =  _context.SaveChanges();
            if (result > 0)
            {
                return true;
            }
            else return false;
        }
        catch (Exception except)
        {
            Console.WriteLine($"Template Skill Elem input error: {except.Message} -- {except.InnerException.Message}");
            return false;
        }
    }
}
