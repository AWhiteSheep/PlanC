@using PlanC.EntityDataModel
@using Pages.Planscadres
@using System.Linq;
@using Microsoft.EntityFrameworkCore
@using Syncfusion.EJ2.DropDowns
@inject PCU001Context _context
@inject IJSRuntime JSRuntime
@inherits CourseTemplateFormComponent


<button disabled="@(IsReadOnly)" hidden="@(IsReadOnly)" class="btn btn-outline-dark mb-4" @onclick="() => AddExam()">Ajouter un examen</button>

<hr class="bcSeparator" />
<table class="mt-3 table table-borderless text-center p-0" style="width:100%">
    <thead>
        <tr>
            @if (!IsReadOnly)
            {
                <th>Ajouter un élément de compétence</th>
            }
            <th style="min-width:60%">Titre de l'examen</th>
            <th>Pondération</th>
            @if (!IsReadOnly)
            {
                <th></th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (Examens exam in Template.ExamensFinalsCertificatifs.Select(ex => ex.Examen))
        {
        <tr>
            @if (!IsReadOnly)
            {
                <td>
                    <button class="btn btn-circle" @onclick="() => AddElement(exam)"><i class="fas fa-plus"></i></button>
                </td>
            }
            <td>
                <input class="input form-control" readonly="@(IsReadOnly)" @bind="exam.Qualification" />
            </td>
            <td>
                <input class="input form-control" readonly="@(IsReadOnly)" @bind="exam.WeightAccessor" />
            </td>
            
        </tr>

            @foreach (ExamensElementsCompetences ese in exam.ExamensElementsCompetences)
            {
                <tr>
                    <td>
                        Élément:
                    </td>
                    <td>
                        <EjsComboBox Readonly="@(IsReadOnly)" Placeholder="Choisir un élément..." 
                                     CssClass="input form-control border-dark" TValue="string" Value="GetUnselectedSkillElements(exam).First().Libele"  DataSource="GetUnselectedSkillElements(exam)">
                            <ComboBoxEvents TValue="string" ValueChange="@(e => SetElement(e, ese))"></ComboBoxEvents>
                            <ComboBoxFieldSettings Value="Id" Text="Libele"></ComboBoxFieldSettings>
                        </EjsComboBox>
                    </td>
                    <td>
                        Pondération
                    </td>
                    <td>
                        <input class="input form-control" readonly="@(IsReadOnly)" type="number" @bind="ese.PoidElement" />
                    </td>
                    @if (!IsReadOnly)
                    {
                        <td>
                            <button class="btn btn-circle" @onclick="() => exam.ExamensElementsCompetences.Remove(ese)"><i class="fas fa-trash"></i></button>
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>


    @code {
        [Parameter]
        public PlansCadres Template { get; set; }

        [Parameter]
        public EventCallback<PlansCadres> TemplateChanged { get; set; }

        [Parameter]
        public bool IsReadOnly { get; set; } = false;

        [CascadingParameter]
        public PCU001Context context { get; set; }

        [CascadingParameter]
        public FormPlanCadre.FormMode CurrentMode {get ; set;}

        public List<Examens> ExamInput { get; private set; }

        public List<ExamensFinalsCertificatifs> FinalExams { get; private set; }

        public List<ExamensElementsCompetences> ExamSkillElemInput { get; private set; }

        private List<ElementsCompetence> Availableskillelements { get; set; }

        protected override void OnParametersSet()
        {



        }

        protected override void OnInitialized()
        {
            Availableskillelements = Template.PlanCadreCompetenceElements.Select(tse => tse.ElementCompetence).ToList();

            FinalExams = Template.ExamensFinalsCertificatifs.ToList();
            ExamInput = Template.ExamensFinalsCertificatifs.Select(fe => fe.Examen).ToList();
        }

        public override bool SaveProgress()
        {
            FinalExams.Clear();
            foreach(Examens exam in ExamInput)
            {
                FinalExams.Add(new ExamensFinalsCertificatifs()
                {
                    CoursId = Template.CoursId,
                    VsnCdttm = Template.VsnCdttm,
                    ExamenId = exam.Id,
                    PlansCadres = Template,
                    Examen = exam,
                    TrkUid = "testenv"
                });
            }

            Template.ExamensFinalsCertificatifs = FinalExams;

            try
            {
                int result = _context.SaveChanges();
                return true;

            }
            catch (Exception except)
            {
                Console.WriteLine($"Final exam data entry error: {except.Message}");
                return false;
            }
        }

        private void AddExam()
        {
            ExamInput.Add(new Examens()
            {
                TypeExamenCode = "01",
            });
            StateHasChanged();
        }

        private void DeleteExam(Examens exam)
        {
            ExamInput.Remove(exam);
            StateHasChanged();
        }

        private void AddElement(Examens exam)
        {
            exam.ExamensElementsCompetences.Add(new ExamensElementsCompetences()
            {
                Examen = exam,
                ExamenId = exam.Id
            });
        }

        private void SetElement(ChangeEventArgs<string> args, ExamensElementsCompetences ese)
        {
            ese.ElementCompetence = Availableskillelements.Find(se => se.Id == args.Value);
            StateHasChanged();
        }

        List<ElementsCompetence> GetUnselectedSkillElements(Examens exam)
        {
            return Availableskillelements.Except(exam.ExamensElementsCompetences.Select(ese => ese.ElementCompetence)).ToList();
        }
    }
