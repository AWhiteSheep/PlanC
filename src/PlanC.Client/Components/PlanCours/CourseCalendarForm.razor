@using Microsoft.EntityFrameworkCore
@using Syncfusion.EJ2.Blazor.DropDowns
@using PlanC.Client.Data
@using PlanC.EntityDataModel
@inherits CoursePlanInputFormComponent
@inject PCU001Context _context

<div class="container-fluid">
    <button disabled="@(IsReadOnly)" hidden="@(IsReadOnly)" class="btn btn-outline-dark mb-4" @onclick="() => AddActivity()">Ajouter une activité</button>

    <table class="table table-borderless text-md-center text-dark" style="width:100%">
        <thead>
            <tr>
                <th style="width:5%">

                </th>
                <th style="width:10%">
                    Durée
                </th>
                <th style="width:40%">
                    Éléments de compétence
                </th>
                <th style="width:40%">
                    Contenu
                </th>
                <th>

                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (CoursActivite timeblock in CurrentActivities)
            {
                <tr class="border-dark">
                    <td>
                        <p><i class="fas fa-arrow-up btn btn-circle clickable uk-icon-hover" @onclick="() => MoveUp(timeblock)"></i></p>
                        <p><i class="fas fa-arrow-down btn btn-circle clickable uk-icon-hover" @onclick="() => MoveDown(timeblock)"></i></p>
                    </td>
                    <td>
                        <input class="input form-control" type="number" min="1" max="15" @bind="timeblock.ActvtLgnth" /> <span>semaines</span>
                    </td>
                    <td>
                        <div class="row">
                            <div class="col-md-3">
                                <button class="btn btn-circle" @onclick="() => AddSkillElemCrit(timeblock)"><i class="fas fa-plus"></i></button>
                            </div>
                            <div class="col-md-9">
                                @foreach (CoursCompetenceElements cse in timeblock.CoursCompetenceElements)
                                {
                                    <div class="row">
                                        <div class="col-md-9">
                                            <EjsComboBox TValue="CriteresElementCompetence" DataSource="GetUnselectedSkillElementCriteria(timeblock)">
                                                <ComboBoxEvents TValue="int" ValueChange="@(e => SetCrit(e, cse))"></ComboBoxEvents>
                                                <ComboBoxFieldSettings Value="IdentityKey" Text="DescriptionCritere"></ComboBoxFieldSettings>
                                            </EjsComboBox>
                                        </div>
                                        <div class="col-md-3">
                                            <button class="btn btn-circle" @onclick="() => timeblock.CoursCompetenceElements.Remove(cse)"><i class="fas fa-trash"></i></button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                    <td>
                        <textarea @bind="timeblock.ActvtDesc" class="input form-control"></textarea>
                    </td>
                    <td>
                        <button class="btn btn-circle" @onclick="() => CurrentActivities.Remove(timeblock)"><i class="fas fa-trash"></i></button>
                    </td>
                </tr>

            }
        </tbody>
    </table>
</div>
@code {

    private PlansCadres Template { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    public List<ElementsCompetence> AssociatedSkillElems { get; set; }

    public List<CriteresElementCompetence> AssociatedSkillElemCrits { get; set; }

    private LinkedList<CoursActivite> CurrentActivities;

    protected override void OnInitialized()
    {
        CurrentActivities = new LinkedList<CoursActivite>();
        AssociatedSkillElems = new List<ElementsCompetence>();
        AssociatedSkillElemCrits = new List<CriteresElementCompetence>();
    }

    protected override async Task OnParametersSetAsync()
    {
        FetchData();
    }

    private void AddActivity()
    {
        CurrentActivities.AddLast(new CoursActivite()
        {
            CoursId = CoursePlan.CoursId,
            PlnVsnCdttm = CoursePlan.PlnVsnCdttm,
            SessionId = CoursePlan.SessionId,
            TchrUid = CoursePlan.TchrUid,
            PlansCours = CoursePlan
        });

        StateHasChanged();
    }

    private void FetchData()
    {
        Template = _context.PlansCadres.Where(t => t.CoursId == CoursePlan.CoursId)
        .OrderByDescending(t => t.VsnCdttm)
        .Include(t => t.PlanCadreCompetenceElements)
        .First();

        foreach (PlanCadreCompetenceElements tse in Template.PlanCadreCompetenceElements)
        {
            _context.Entry(tse)
                    .Reference(tse => tse.ElementCompetence)
                    .Load();

            _context.Entry(tse.ElementCompetence)
                    .Collection(se => se.CriteresElementCompetence)
                    .Load();
        }

        AssociatedSkillElems = Template.PlanCadreCompetenceElements.Select(tse => tse.ElementCompetence).ToList();

        AssociatedSkillElemCrits = AssociatedSkillElems.SelectMany(se => se.CriteresElementCompetence).ToList();

        _context.Entry(CoursePlan)
                .Collection(c => c.CoursActivite)
                .Load();

        foreach (CoursActivite act in CoursePlan.CoursActivite)
        {
            _context.Entry(act)
                    .Collection(a => a.CoursCompetenceElements)
                    .Load();
        }

        CoursePlan.CoursActivite.OrderBy(act => act.ActvtSqnbr);

        foreach (CoursActivite act in CoursePlan.CoursActivite)
        {
            CurrentActivities.AddLast(act);
        }
    }

    public void SetCrit(ChangeEventArgs<int> crt, CoursCompetenceElements cse)
    {
        cse.IdentityCritereElementCompetence = crt.Value;
        cse.IdentityCritereElementCompetenceNavigation = _context.CriteresElementCompetence.Where(c => c.IdentityKey == crt.Value).SingleOrDefault();
        StateHasChanged();
    }

    public void AddSkillElemCrit(CoursActivite timeblock)
    {
        timeblock.CoursCompetenceElements.Add(new CoursCompetenceElements()
        {
            IdendityCoursActivityNavigation = timeblock
        });
        StateHasChanged();
    }

    public override async Task<bool> SaveProgress()
    {
        try
        {
            Int16 iter = 1;
            foreach (CoursActivite block in CurrentActivities)
            {
                block.ActvtSqnbr = iter++;
                CoursActivite existingEntity = _context.CoursActivite.Find(block.Identity);
                if (existingEntity != null)
                {
                    _context.Entry(existingEntity).CurrentValues.SetValues(block);
                }
                else
                {
                    CoursePlan.CoursActivite.Add(block);
                }
            }
            _context.SaveChanges();
            return true;
        }
        catch (Exception except)
        {
            Console.WriteLine($"{except.Message}");
            return false;
        }
    }

    public override string ToString()
    {
        return "Calendrier des activités";
    }

    List<CriteresElementCompetence> GetUnselectedSkillElementCriteria(CoursActivite timeblock)
    {
        var select = timeblock.CoursCompetenceElements.Select(cce => cce.IdentityCritereElementCompetenceNavigation).ToList();
        var returnVal = AssociatedSkillElemCrits.Except(select).ToList();
        return returnVal;
    }

    private void MoveUp(CoursActivite block)
    {
        LinkedListNode<CoursActivite> node = CurrentActivities.Find(block);
        if (node == CurrentActivities.First) { return; }
        CoursActivite temp = node.Previous.Value;
        node.Previous.Value = block;
        node.Value = temp;
        StateHasChanged();
    }

    private void MoveDown(CoursActivite block)
    {
        LinkedListNode<CoursActivite> node = CurrentActivities.Find(block);
        if (node == CurrentActivities.Last) { return; }
        CoursActivite temp = node.Next.Value;
        node.Next.Value = block;
        node.Value = temp;
        StateHasChanged();
    }
}

