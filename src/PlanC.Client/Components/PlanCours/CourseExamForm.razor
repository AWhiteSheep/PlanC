@using Microsoft.EntityFrameworkCore

@inherits CoursePlanInputFormComponent
@inject PCU001Context _context


<div class="h4 bcTitle">Examens</div>


@* Génère la liste des examens finaux du plan-cadre en lecture seule. *@
<hr class="bcSeparator" />

<FinalExamInput Template="Template" IsReadOnly="true"></FinalExamInput>

<hr class="bcSeparator" />

<button class="btn btn-outline-dark mb-4" @onclick="() => AddExam()">Ajouter un examen</button>

<hr class="bcSeparator" />
<table class="mt-3 table table-borderless text-center p-0" style="width:100%">
    <thead>
        <tr>
            <th style="min-width:60%">Titre de l'examen</th>
            <th>Pondération</th>
            <th>

            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (Examens exam in CurrentExams)
        {
            <tr>
                <td>
                    <input required class="input form-control" @bind="exam.Qualification" />
                </td>
                <td>
                    <input required class="input form-control" @bind="exam.WeightAccessor" />
                </td>
                <td>
                    <button class="btn btn-circle" @onclick="() => DeleteExam(exam)"><i class="fas fa-trash"></i></button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    //Le plan-cadre. Nécessaire pour tirer les examens finaux.
    private PlansCadres Template { get; set; }

    //Liste locale des examens.
    private List<Examens> CurrentExams { get; set; } = new List<Examens>();

    /// <summary>
    /// Récupère les données nécessaires à la tâche -- le plan-cadre et ses examens finaux.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        FetchData();
    }


    protected void FetchData()
    {
        _context.Entry(CoursePlan)
                .Collection(p => p.ExamensCertificatifsNonsFinals)
                .Load();
        foreach (ExamensCertificatifsNonsFinals ex in CoursePlan.ExamensCertificatifsNonsFinals)
        {
            _context.Entry(ex)
                   .Reference(ex => ex.Examen)
                   .Load();
        }

        Template = _context.PlansCadres.Where(t => t.CoursId == CoursePlan.CoursId)
                                        .OrderByDescending(t => t.VsnCdttm)
                                        .FirstOrDefault();

        _context.Entry(Template)
                .Collection(t => t.ExamensFinalsCertificatifs)
                .Load();

        foreach(ExamensFinalsCertificatifs exam in Template.ExamensFinalsCertificatifs)
        {
            _context.Entry(exam)
                    .Reference(ex => ex.Examen)
                    .Load();
        }

        CurrentExams = CoursePlan.ExamensCertificatifsNonsFinals.Select(ex => ex.Examen).ToList();

        StateHasChanged();
    }

    /// <summary>
    /// Sauvegarde les changements dans la base de données
    /// </summary>
    /// <returns>Vrai si l'opération a été effectuée avec succès, faux sinon.</returns>
    public async override Task<bool> SaveProgress()
    {
        try
        {
            foreach (Examens exam in CurrentExams)
            {
                Examens existingItem = _context.Examens.Find(exam.Id);

                if (existingItem != null)
                {
                    _context.Entry(existingItem).CurrentValues.SetValues(exam);
                }
                else
                {
                    CoursePlan.ExamensCertificatifsNonsFinals.Add(new ExamensCertificatifsNonsFinals()
                    {
                        TrkUid = "testusr",
                        PlansCours = CoursePlan,
                        Examen = exam
                    });
                }
            }

            _context.SaveChanges();
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in exam database input -- {ex.Message}");
            return false;
        }
    }

    public override string ToString()
    {
        return "Examens";
    }

    /// <summary>
    /// Ajoute un examen à la liste.
    /// </summary>
    private void AddExam()
    {
        CurrentExams.Add(new Examens()
        {
            TrkUid = "testusr"
        });
        StateHasChanged();
    }

    /// <summary>
    /// Supprime un examen.
    /// </summary>
    /// <param name="exam"></param>
    private void DeleteExam(Examens exam)
    {
        CurrentExams.Remove(exam);
    }

    /// <summary>
    /// Validation de base.
    /// </summary>
    /// <returns>Vrai si valide, faux sinon.</returns>
    public override bool Validate()
    {
        foreach(Examens exam in CurrentExams)
        {
            if (String.IsNullOrEmpty(exam.Qualification) || exam.PoidExamen == null)
            {
                return false;
            }
        }

        return true;
    }
}
