@using Microsoft.EntityFrameworkCore

@inherits CoursePlanInputFormComponent
@inject PCU001Context _context

<button class="btn btn-outline-dark mb-4" @onclick="() => AddExam()">Ajouter un examen</button>

<hr class="bcSeparator" />
<table class="mt-3 table table-borderless text-center p-0" style="width:100%">
    <thead>
        <tr>
            <th style="min-width:60%">Titre de l'examen</th>
            <th>Pondération</th>
            <th>

            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (Examens exam in CurrentExams)
        {
            <tr>
                <td>
                    <input class="input form-control" @bind="exam.Qualification" />
                </td>
                <td>
                    <input class="input form-control" @bind="exam.WeightAccessor" />
                </td>
                <td>
                    <button class="btn btn-circle" @onclick="() => DeleteExam(exam)"><i class="fas fa-trash"></i></button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Examens> CurrentExams { get; set; } = new List<Examens>();

    protected override async Task OnParametersSetAsync()
    {
        FetchData();
    }

    protected void FetchData()
    {
        _context.Entry(CoursePlan)
                .Collection(p => p.ExamensCertificatifsNonsFinals)
                .Load();
        foreach (ExamensCertificatifsNonsFinals ex in CoursePlan.ExamensCertificatifsNonsFinals)
        {
            _context.Entry(ex)
                   .Reference(ex => ex.Examen)
                   .Load();
        }

        CurrentExams = CoursePlan.ExamensCertificatifsNonsFinals.Select(ex => ex.Examen).ToList();
    }

    public async override Task<bool> SaveProgress()
    {
        try
        {
            foreach (Examens exam in CurrentExams)
            {
                Examens existingItem = _context.Examens.Find(exam.Id);

                if (existingItem != null)
                {
                    _context.Entry(existingItem).CurrentValues.SetValues(exam);
                }
                else
                {
                    CoursePlan.ExamensCertificatifsNonsFinals.Add(new ExamensCertificatifsNonsFinals()
                    {
                        TrkUid = "testusr",
                        PlansCours = CoursePlan,
                        Examen = exam
                    });
                }
            }

            _context.SaveChanges();
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in exam database input -- {ex.Message}");
            return false;
        }
    }

    public override string ToString()
    {
        return "Examens";
    }

    private void AddExam()
    {
        CurrentExams.Add(new Examens()
        {
            TrkUid = "testusr"
        });
        StateHasChanged();
    }

    private void DeleteExam(Examens exam)
    {
        CurrentExams.Remove(exam);
    }
}
