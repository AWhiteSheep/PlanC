@using PlanC.EntityDataModel
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Grids
@inject PCU001Context _context
@inject IJSRuntime JSRuntime
@* les cdn(s) doivent être ajoutés pour le bon fonctionnement du componant *@

@if (Departements != null)
{
    <div class="col-12">
        <div class="card shadow">
            <div class="card-header">
                <div class="d-flex">
                    <button class="btn btn-primary" @onclick="Add"> Ajouter un département </button>
                    <div class="custom-checkbox pl-5 pt-2 disable-select">
                        <input @bind="BulkCheckDepart" type="checkbox" class="custom-control-input" id="bulkCheckDepart" />
                        <label class="custom-control-label" for="bulkCheckDepart"> Ajouter plus d'un département </label>
                    </div>
                </div>
            </div>
            <div class="row card-body">
                <div class="col-md-6">
                    <div class="col-12 card shadow">
                        <div class="row card-body">
                            @if (NewDepartement != null)
                            {
                                <EditForm Model="NewDepartement" OnSubmit="SubmitNew" class="col-12">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <div class="form-row">
                                        <div class="form-group col-12">
                                            <label for="titleedit"> Nom du département </label>
                                            <OnStringInput @bind-Value="@(NewDepartement.Titre)" class="form-control"></OnStringInput>
                                            <ValidationMessage For="@(() => NewDepartement.Titre)" />
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-12">
                                            <label for="policyedit"> Politique du département </label>
                                            <textarea @bind="@NewDepartement.Politique" class="form-control" rows="4"></textarea>
                                            <ValidationMessage For="@(() => NewDepartement.Politique)" />
                                        </div>
                                    </div>
                                    <div class="col-12 text-right p-3">
                                        <button type="submit" class="btn btn-primary"> Ajouter </button>
                                        <a class="btn btn-primary text-white" @onclick="CancelAdd"> Annuler </a>
                                    </div>
                                </EditForm>
                            }
                            else
                            {
                                <EditForm @ref="EditFormSelectedDepartements" Model="SelectedDepartements" class="col-12">
                                    <div class="form-row">
                                        <div class="form-group col-12">
                                            <label for="titleedit"> Nom du département </label>
                                            <InputText disabled="@IsDisabledSelectedDepartements" name="title" class="form-control" @bind-Value="@(SelectedDepartements.Titre)"></InputText>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-12">
                                            <label for="policyedit"> Politique du département </label>
                                            <InputTextArea disabled="@IsDisabledSelectedDepartements" name="policy" class="form-control" rows="4" @bind-Value="@SelectedDepartements.Politique"></InputTextArea>
                                        </div>
                                    </div>
                                </EditForm>
                                <div class="col-12 text-right p-3">
                                    @if (IsDisabledSelectedDepartements)
                                    {
                                        <button class="btn btn-info" @onclick="Modifier"> Modifier </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-success" @onclick="Save"> Sauvegarder </button>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <!-- Module table des départements -->
                    <EjsGrid @ref="Grid" ModelType="Departements.First()" DataSource="Departements"
                             TValue="Departements" AllowPaging="true" Locale="fr-FR" Height=315
                             Toolbar="@(new List<string>() { "Search"})" AllowSorting="true"
                             ContextMenuItems="@(new List<object>() { "Edit", "Delete" })">

                        <GridSearchSettings Fields="@(new string[] { "Title", "Id" })" Operator=Operator.Contains IgnoreCase="true"></GridSearchSettings>

                        <!-- Les événements se passant sur la table et les paramètre -->
                        <GridEvents RowSelected="RowSelectHandler" TValue="Departements"></GridEvents>
                        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>

                        <!-- Template pour afficher les différents programmes dans le départements donné -->
                        <GridTemplates>
                            <DetailTemplate>
                                @{
                                    var Departements = (context as Departements);
                                    <table class="text-right" width="100%">
                                        <thead>
                                            <tr>
                                                <th> Titre </th>
                                                <th> Identifiant </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Loop sur tous les programmes du département -->
                                            @foreach (Programmes program in Departements.Programmes)
                                            {
                                                <tr>
                                                    <td> @program.Designation </td>
                                                    <td> @program.Id </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            </DetailTemplate>
                        </GridTemplates>
                        <!-- Affiche en colone les différentes propriétés du département -->
                        <GridColumns>
                            <GridColumn Field=@nameof(PlanC.EntityDataModel.Departements.Id) IsPrimaryKey="true" IsIdentity="true" HeaderText="Id"
                                        TextAlign="TextAlign.Right" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(PlanC.EntityDataModel.Departements.Titre) HeaderText="Titre de l'élément"
                                        TextAlign="TextAlign.Right" Width="130"></GridColumn>
                            <GridColumn HeaderText="Gestion des départements" Width="150">
                                <GridCommandColumns>
                                    <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { Content = "Détails", CssClass = "e-flat" })"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>
                        </GridColumns>
                    </EjsGrid>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <p> Il y a eu un problème lors de la connection à la base de données. </p>
    </div>
}


<style>
    a:hover {
        cursor: pointer;
    }
</style>

@code {
    [Parameter]
    // paramètre du grid
    public bool IsEditable { get; set; } = false;
    private EjsGrid<Departements> Grid;
    private EditForm EditFormSelectedDepartements;

    // liste de départements pour accéder à la database
    private List<Departements> Departements;

    // pour modifier le département sélectionné
    private Departements SelectedDepartements;
    private bool IsDisabledSelectedDepartements = true;

    // pour construire un nouveau département
    private Departements NewDepartement { get; set; } = null;
    private EditForm FormNewDepartement;
    private bool BulkCheckDepart { get; set; } = false;

    protected override void OnInitialized()
    {
        JSRuntime.InvokeAsync<string>("modelInitializing");
        Departements = _context.Departements.ToList();
        SelectedDepartements = Departements.First();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JSRuntime.InvokeAsync<string>("modelLoaded");
    }

    //// Ouvre tout les tabs pour de la table de département
    //public void ExpendAll(ClickEventArgs args)
    //{
    //    //this.GridDepartement.DetailExpandAll();
    //}

    // sauvegarde les données
    async void Save()
    {
        // https://docs.microsoft.com/en-us/ef/core/querying/tracking
        // l'objet est tracké par la database dès un changement
        // apporté a ce dernier le database peut le savoir et sauvegarder les changements
        try
        {
            IsDisabledSelectedDepartements = !IsDisabledSelectedDepartements;
            _context.SaveChanges();
            Grid.Refresh();
            StateHasChanged();
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeAsync<string>("alertDatabaseError");
        }
    }

    void Modifier()
    {
        IsDisabledSelectedDepartements = !IsDisabledSelectedDepartements;
        StateHasChanged();
    }

    // ajoute les données
    void Add()
    {
        NewDepartement = new Departements();
        StateHasChanged();
    }

    // ajoute les données
    async void SubmitNew()
    {
        // ajoute les données dans la database
        try
        {
            _context.Departements.Add(NewDepartement);
            _context.SaveChanges();

            // reset le formulaire
            NewDepartement = null;

            // si le check est true redébuter le formulaire
            if (BulkCheckDepart)
            {
                NewDepartement = new Departements();
            }

            // update le ui
            StateHasChanged();
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeAsync<string>("alertDatabaseError");
        }
    }

    // canceller la demande de création de département
    void CancelAdd()
    {
        NewDepartement = null;
        StateHasChanged();
    }

    public void RowSelectHandler(RowSelectEventArgs<Departements> args)
    {
        SelectedDepartements = Departements.SingleOrDefault(e => e.Id == args.Data.Id);
    }
}
