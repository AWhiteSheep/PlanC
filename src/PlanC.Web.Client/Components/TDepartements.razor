@using Syncfusion.EJ2.Blazor.Spinner
@using PlanC.WebApi.Server.DataAccess
@using PlanC.WebApi.Models
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.Data
@inject PCU001Context _context
@inject IJSRuntime JSRuntime

@* les cdn(s) doivent être ajoutés pour le bon fonctionnement du componant *@

@if (departments == null)
{
}
else
{
    <div class="card border-left-warning shadow h-100 py-2">
        <div class="row card-body">
            <div class="col-md-6">
                <EditForm Model="SelectedDepartment">
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <label for="idedit"> Id </label>
                            <input class="form-control" @bind="@(SelectedDepartment.Id)" disabled />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <label for="titleedit"> Nom du département </label>
                            <InputText class="form-control" @bind-Value="@(SelectedDepartment.Title)"></InputText>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <label for="policyedit"> Politique du département </label>
                            <InputTextArea class="form-control" rows="4" @bind-Value="@SelectedDepartment.Policy"></InputTextArea>
                        </div>
                    </div>
                </EditForm>
                <EjsButton @onclick="Save"> Sauvegarder </EjsButton>
            </div>
            <div class="col-md-6">
                <!-- Module table des départements -->
                <EjsGrid @ref="Grid" ModelType="departments.First()" DataSource="departments" EnablePersistence="true"
                         TValue="Department" AllowPaging="true" Locale="fr-FR" Height=315>

                    <!-- Les événements se passant sur la table et les paramètre -->
                    <GridEvents RowSelected="RowSelectHandler" TValue="Department"></GridEvents>
                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>

                    <!-- Template pour afficher les différents programmes dans le départements donné -->
                    <GridTemplates>
                        <DetailTemplate>
                            @{
                                var department = (context as Department);
                                <table class="text-right" width="100%">
                                    <thead>
                                        <tr>
                                            <th> Titre </th>
                                            <th> Identifiant </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Loop sur tous les programmes du département -->
                                        @foreach (Tpgm program in department.Tpgm)
                                        {
                                            <tr>
                                                <td> @program.PgmTitle </td>
                                                <td> @program.PgmId </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                        </DetailTemplate>
                    </GridTemplates>
                    <!-- Affiche en colone les différentes propriétés du département -->
                    <GridColumns>
                        <GridColumn Field=@nameof(Department.Id) HeaderText="Id"
                                    TextAlign="TextAlign.Right" Width="30"></GridColumn>
                        <GridColumn Field=@nameof(Department.Title) HeaderText="Titre de l'élément"
                                    TextAlign="TextAlign.Right" Width="130"></GridColumn>
                        <GridColumn HeaderText="Gestion des départements" Width="150">
                            <GridCommandColumns>
                                <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { Content = "Détails", CssClass = "e-flat" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </EjsGrid>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsEditable { get; set; } = false;
    EjsGrid<Department> Grid;
    private List<Department> departments;
    public Department SelectedDepartment = new Department();

    protected override void OnInitialized()
    {
        JSRuntime.InvokeAsync<string>("modelInitializing");
        departments = _context.Departments.ToList();
    }

    protected override void OnAfterRender(bool firstRender) 
    {
        JSRuntime.InvokeAsync<string>("modelLoaded");
    }

    // Ouvre tout les tabs pour de la table de département
    public void ExpendAll(ClickEventArgs args)
    {
        //this.GridDepartement.DetailExpandAll();
    }

    // sauvegarde les données
    void Save()
    {
        this.Grid.UpdateRow(1, SelectedDepartment);
    }

    public void RowSelectHandler(RowSelectEventArgs<Department> args)
    {
        SelectedDepartment = args.Data;
    }
}
