@using PlanC.WebApi.Models
@using PlanC.WebApi.Server.DataAccess
@inject NavigationManager NavigationManager
@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.Data
@using Syncfusion.EJ2.Blazor.DropDowns

<div class="container">
    <!-- formulaire pour les nouvelles compétences -->
    <EditForm Model="@skill" class="competence-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label class="control-label" for="SklTitle">Titre de la compétence: </label>
            <OnStringInput @bind-Value="skill.Title" class="form-control" id="SklTitle" placeholder="Titre de la compétence" />
            <ValidationMessage For="@(() => skill.Title)" />
        </div>
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label class="control-label" for="SklId">Numéro de la compétence: </label>
                    <OnStringInputMask @bind-Value="skill.Id" CssClass="theme-mask" Mask="0000" id="SklId" placeholder="ex: 1051." />
                    <ValidationMessage For="@(() => skill.Id)" />
                </div>
            </div>
            <!-- Sélection du programme -->
            <div class="col-6">
                <div class="form-group">
                    <label class="control-label" for="PgmId">Sélectionner un programme: </label>
                    <EjsDropDownList CssClass="theme-dropdown" TValue="string" @bind-Value="skill.StudyProgramId" ModelType="programme" DataSource="programmes" Placeholder="Choix des programmes..." AllowFiltering=true IgnoreAccent=true>
                        <DropDownListTemplates>
                            <ItemTemplate Context="modelItem">
                                <span><span class='Title'>@((modelItem as Tpgm).PgmTitle)</span><span class='PgmId'>@((modelItem as Tpgm).PgmId)</span></span>
                            </ItemTemplate>
                            <ValueTemplate Context="modelItem">
                                <span>@((modelItem as Tpgm).PgmTitle) - @((modelItem as Tpgm).PgmId)</span>
                            </ValueTemplate>
                        </DropDownListTemplates>
                        <DropDownListFieldSettings GroupBy="Dptmnt.Title" Value="PgmId" Text="PgmTitle"></DropDownListFieldSettings>
                    </EjsDropDownList>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label" for="AsscAttd">Attente: </label>
            <InputTextArea @bind-Value="skill.AsscAttd" class="form-control" rows="5" id="AsscAttd" name="AsscAttd"></InputTextArea>
            <ValidationMessage For="@(() => skill.AsscAttd)" />
        </div>
        <div class="form-group">
            <label class="control-label" for="SklContext">Context de réalisation: </label>
            <InputTextArea @bind-Value="cntxt.Title" class="form-control" rows="5" id="SklContext" name="SklContext"></InputTextArea>
            <ValidationMessage For="@(() => cntxt.Title)" />
        </div>
        <div class="form-group">
            <label class="control-label">Élément de la compétence: </label>
            <EjsGrid DataSource="skElements" TValue="SkillElement" AllowPaging="true" Locale="fr-FR" Toolbar="@(new string[] { "Add", "Edit", "Delete", "Cancel", "Update"  })">
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"></GridEditSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(SkillElement.Title) HeaderText="Titre élément" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                    <GridColumn Field=@nameof(SkillElement.Description) HeaderText="Déscription" TextAlign="TextAlign.Right" Width="200"></GridColumn>
                </GridColumns>
            </EjsGrid>
        </div>
        <div class="col-12">
            <button type="submit" class="btn btn-default">Submit</button>
        </div>
    </EditForm>
</div>

@code {
    private readonly PCU001Context _context = new PCU001Context();
    Skill skill = new Skill();
    SkillAchievementContext cntxt = new SkillAchievementContext();
    List<SkillElement> skElements = new List<SkillElement>();

    public async void HandleValidSubmit()
    {
        skElements.ForEach(e => { e.SkillId = skill.Id; e.SequenceNumber = (short)(skElements.IndexOf(e) + 1); });
        skill.Tsklelem = skElements;
        cntxt.SkillId = skill.Id;
        skill.Tsklcntxt.Add(cntxt);

        _context.Skills.Add(skill);
        try
        {
            Console.WriteLine($"SQL return code: {await _context.SaveChangesAsync()}");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error: {e.Message} -- {e.InnerException}");
        }
        NavigationManager.NavigateTo("/");
    }

    // définition des programmes
    Tpgm programme = PlanC.Web.Client.Data.PCU001FakeContext.programmes.First();
    List<Tpgm> programmes = PlanC.Web.Client.Data.PCU001FakeContext.programmes;
}

<style>
    .PgmId {
        right: 15px;
        position: absolute;
    }
</style>
